// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TestCasesAPIController binds http requests to an api service and writes the service results to the http response
type TestCasesAPIController struct {
	service      TestCasesAPIServicer
	errorHandler ErrorHandler
}

// TestCasesAPIOption for how the controller is set up.
type TestCasesAPIOption func(*TestCasesAPIController)

// WithTestCasesAPIErrorHandler inject ErrorHandler into controller
func WithTestCasesAPIErrorHandler(h ErrorHandler) TestCasesAPIOption {
	return func(c *TestCasesAPIController) {
		c.errorHandler = h
	}
}

// NewTestCasesAPIController creates a default api controller
func NewTestCasesAPIController(s TestCasesAPIServicer, opts ...TestCasesAPIOption) Router {
	controller := &TestCasesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TestCasesAPIController
func (c *TestCasesAPIController) Routes() Routes {
	return Routes{
		"CreateTestCase": Route{
			strings.ToUpper("Post"),
			"/v1/projects/{projectId}/prompts/{promptId}/tests",
			c.CreateTestCase,
		},
		"DeleteTestCase": Route{
			strings.ToUpper("Delete"),
			"/v1/projects/{projectId}/prompts/{promptId}/tests/{testId}",
			c.DeleteTestCase,
		},
		"GetTestCase": Route{
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/prompts/{promptId}/tests/{testId}",
			c.GetTestCase,
		},
		"ListTestCases": Route{
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/prompts/{promptId}/tests",
			c.ListTestCases,
		},
		"UpdateTestCase": Route{
			strings.ToUpper("Put"),
			"/v1/projects/{projectId}/prompts/{promptId}/tests/{testId}",
			c.UpdateTestCase,
		},
	}
}

// CreateTestCase - Create a new test case for a prompt
func (c *TestCasesAPIController) CreateTestCase(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	testCaseInputParam := TestCaseInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&testCaseInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTestCaseInputRequired(testCaseInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTestCaseInputConstraints(testCaseInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTestCase(r.Context(), projectIdParam, promptIdParam, testCaseInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTestCase - Delete a test cases for a given prompt
func (c *TestCasesAPIController) DeleteTestCase(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	testIdParam := chi.URLParam(r, "testId")
	if testIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"testId"}, nil)
		return
	}
	result, err := c.service.DeleteTestCase(r.Context(), projectIdParam, promptIdParam, testIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTestCase - Get a test cases for a given prompt.
func (c *TestCasesAPIController) GetTestCase(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	testIdParam := chi.URLParam(r, "testId")
	if testIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"testId"}, nil)
		return
	}
	result, err := c.service.GetTestCase(r.Context(), projectIdParam, promptIdParam, testIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListTestCases - List all test cases for a prompt
func (c *TestCasesAPIController) ListTestCases(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	result, err := c.service.ListTestCases(r.Context(), projectIdParam, promptIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTestCase - Update a test case for a given prompt.
func (c *TestCasesAPIController) UpdateTestCase(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	testIdParam := chi.URLParam(r, "testId")
	if testIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"testId"}, nil)
		return
	}
	testCaseInputParam := TestCaseInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&testCaseInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTestCaseInputRequired(testCaseInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTestCaseInputConstraints(testCaseInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTestCase(r.Context(), projectIdParam, promptIdParam, testIdParam, testCaseInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
