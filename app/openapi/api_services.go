// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ServicesAPIController binds http requests to an api service and writes the service results to the http response
type ServicesAPIController struct {
	service      ServicesAPIServicer
	errorHandler ErrorHandler
}

// ServicesAPIOption for how the controller is set up.
type ServicesAPIOption func(*ServicesAPIController)

// WithServicesAPIErrorHandler inject ErrorHandler into controller
func WithServicesAPIErrorHandler(h ErrorHandler) ServicesAPIOption {
	return func(c *ServicesAPIController) {
		c.errorHandler = h
	}
}

// NewServicesAPIController creates a default api controller
func NewServicesAPIController(s ServicesAPIServicer, opts ...ServicesAPIOption) Router {
	controller := &ServicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ServicesAPIController
func (c *ServicesAPIController) Routes() Routes {
	return Routes{
		"Createservice": Route{
			strings.ToUpper("Post"),
			"/v1/services",
			c.Createservice,
		},
		"Deleteservice": Route{
			strings.ToUpper("Delete"),
			"/v1/services/{serviceId}",
			c.Deleteservice,
		},
		"Getservice": Route{
			strings.ToUpper("Get"),
			"/v1/services/{serviceId}",
			c.Getservice,
		},
		"Listservices": Route{
			strings.ToUpper("Get"),
			"/v1/services",
			c.Listservices,
		},
		"Updateservice": Route{
			strings.ToUpper("Put"),
			"/v1/services/{serviceId}",
			c.Updateservice,
		},
	}
}

// Createservice - Create a new service
func (c *ServicesAPIController) Createservice(w http.ResponseWriter, r *http.Request) {
	serviceInputParam := ServiceInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceInputRequired(serviceInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServiceInputConstraints(serviceInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Createservice(r.Context(), serviceInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Deleteservice - Delete a service
func (c *ServicesAPIController) Deleteservice(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	result, err := c.service.Deleteservice(r.Context(), serviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Getservice - Retrieve a service by ID
func (c *ServicesAPIController) Getservice(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	result, err := c.service.Getservice(r.Context(), serviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Listservices - List all services
func (c *ServicesAPIController) Listservices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Listservices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Updateservice - Update a service
func (c *ServicesAPIController) Updateservice(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	serviceInputParam := ServiceInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serviceInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServiceInputRequired(serviceInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServiceInputConstraints(serviceInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Updateservice(r.Context(), serviceIdParam, serviceInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
