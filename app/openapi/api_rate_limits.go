// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// RateLimitsAPIController binds http requests to an api service and writes the service results to the http response
type RateLimitsAPIController struct {
	service      RateLimitsAPIServicer
	errorHandler ErrorHandler
}

// RateLimitsAPIOption for how the controller is set up.
type RateLimitsAPIOption func(*RateLimitsAPIController)

// WithRateLimitsAPIErrorHandler inject ErrorHandler into controller
func WithRateLimitsAPIErrorHandler(h ErrorHandler) RateLimitsAPIOption {
	return func(c *RateLimitsAPIController) {
		c.errorHandler = h
	}
}

// NewRateLimitsAPIController creates a default api controller
func NewRateLimitsAPIController(s RateLimitsAPIServicer, opts ...RateLimitsAPIOption) Router {
	controller := &RateLimitsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RateLimitsAPIController
func (c *RateLimitsAPIController) Routes() Routes {
	return Routes{
		"ServicesServiceIdRateLimitsGet": Route{
			strings.ToUpper("Get"),
			"/v1/services/{serviceId}/rate-limits",
			c.ServicesServiceIdRateLimitsGet,
		},
		"ServicesServiceIdRateLimitsLimitIdDelete": Route{
			strings.ToUpper("Delete"),
			"/v1/services/{serviceId}/rate-limits/{limitId}",
			c.ServicesServiceIdRateLimitsLimitIdDelete,
		},
		"ServicesServiceIdRateLimitsLimitIdPut": Route{
			strings.ToUpper("Put"),
			"/v1/services/{serviceId}/rate-limits/{limitId}",
			c.ServicesServiceIdRateLimitsLimitIdPut,
		},
		"ServicesServiceIdRateLimitsPost": Route{
			strings.ToUpper("Post"),
			"/v1/services/{serviceId}/rate-limits",
			c.ServicesServiceIdRateLimitsPost,
		},
	}
}

// ServicesServiceIdRateLimitsGet - Retrieve rate limits for a service
func (c *RateLimitsAPIController) ServicesServiceIdRateLimitsGet(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	result, err := c.service.ServicesServiceIdRateLimitsGet(r.Context(), serviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ServicesServiceIdRateLimitsLimitIdDelete - Remove a rate limit from a service
func (c *RateLimitsAPIController) ServicesServiceIdRateLimitsLimitIdDelete(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	limitIdParam := chi.URLParam(r, "limitId")
	if limitIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"limitId"}, nil)
		return
	}
	result, err := c.service.ServicesServiceIdRateLimitsLimitIdDelete(r.Context(), serviceIdParam, limitIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ServicesServiceIdRateLimitsLimitIdPut - Update rate limit for a service
func (c *RateLimitsAPIController) ServicesServiceIdRateLimitsLimitIdPut(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	limitIdParam := chi.URLParam(r, "limitId")
	if limitIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"limitId"}, nil)
		return
	}
	rateLimitInputParam := RateLimitInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&rateLimitInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRateLimitInputRequired(rateLimitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRateLimitInputConstraints(rateLimitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ServicesServiceIdRateLimitsLimitIdPut(r.Context(), serviceIdParam, limitIdParam, rateLimitInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ServicesServiceIdRateLimitsPost - Set a new rate limit for a service
func (c *RateLimitsAPIController) ServicesServiceIdRateLimitsPost(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	rateLimitInputParam := RateLimitInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&rateLimitInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRateLimitInputRequired(rateLimitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRateLimitInputConstraints(rateLimitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ServicesServiceIdRateLimitsPost(r.Context(), serviceIdParam, rateLimitInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
