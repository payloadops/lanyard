// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ProjectsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectsAPIController struct {
	service ProjectsAPIServicer
	errorHandler ErrorHandler
}

// ProjectsAPIOption for how the controller is set up.
type ProjectsAPIOption func(*ProjectsAPIController)

// WithProjectsAPIErrorHandler inject ErrorHandler into controller
func WithProjectsAPIErrorHandler(h ErrorHandler) ProjectsAPIOption {
	return func(c *ProjectsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectsAPIController creates a default api controller
func NewProjectsAPIController(s ProjectsAPIServicer, opts ...ProjectsAPIOption) Router {
	controller := &ProjectsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectsAPIController
func (c *ProjectsAPIController) Routes() Routes {
	return Routes{
		"CreateProject": Route{
			strings.ToUpper("Post"),
			"/v1/projects",
			c.CreateProject,
		},
		"DeleteProject": Route{
			strings.ToUpper("Delete"),
			"/v1/projects/{projectId}",
			c.DeleteProject,
		},
		"GetProject": Route{
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}",
			c.GetProject,
		},
		"ListProjects": Route{
			strings.ToUpper("Get"),
			"/v1/projects",
			c.ListProjects,
		},
		"UpdateProject": Route{
			strings.ToUpper("Put"),
			"/v1/projects/{projectId}",
			c.UpdateProject,
		},
	}
}

// CreateProject - Create a new project
func (c *ProjectsAPIController) CreateProject(w http.ResponseWriter, r *http.Request) {
	projectInputParam := ProjectInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectInputRequired(projectInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectInputConstraints(projectInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProject(r.Context(), projectInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProject - Delete a project
func (c *ProjectsAPIController) DeleteProject(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.DeleteProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProject - Retrieve a project by ID
func (c *ProjectsAPIController) GetProject(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.GetProject(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListProjects - List all projects
func (c *ProjectsAPIController) ListProjects(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListProjects(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProject - Update a project
func (c *ProjectsAPIController) UpdateProject(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	projectInputParam := ProjectInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectInputRequired(projectInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectInputConstraints(projectInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProject(r.Context(), projectIdParam, projectInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
