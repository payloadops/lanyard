// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service      UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"CreateUser": Route{
			strings.ToUpper("Post"),
			"/v1/users",
			c.CreateUser,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/v1/users/{userId}",
			c.DeleteUser,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/v1/users/{userId}",
			c.GetUser,
		},
		"ListUsers": Route{
			strings.ToUpper("Get"),
			"/v1/users",
			c.ListUsers,
		},
		"UpdateUser": Route{
			strings.ToUpper("Put"),
			"/v1/users/{userId}",
			c.UpdateUser,
		},
	}
}

// CreateUser - Create a new user
func (c *UsersAPIController) CreateUser(w http.ResponseWriter, r *http.Request) {
	userInputParam := UserInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserInputRequired(userInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserInputConstraints(userInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUser(r.Context(), userInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUser - Delete a specific user
func (c *UsersAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "userId")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser - Get a specific user by ID
func (c *UsersAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "userId")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetUser(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUsers - List all users
func (c *UsersAPIController) ListUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUser - Update a specific user
func (c *UsersAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	userIdParam := chi.URLParam(r, "userId")
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	userInputParam := UserInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserInputRequired(userInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserInputConstraints(userInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUser(r.Context(), userIdParam, userInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
