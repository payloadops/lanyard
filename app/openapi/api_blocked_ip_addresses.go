// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lanyard Ops API
 *
 * The Lanyard Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// BlockedIpAddressesAPIController binds http requests to an api service and writes the service results to the http response
type BlockedIpAddressesAPIController struct {
	service      BlockedIpAddressesAPIServicer
	errorHandler ErrorHandler
}

// BlockedIpAddressesAPIOption for how the controller is set up.
type BlockedIpAddressesAPIOption func(*BlockedIpAddressesAPIController)

// WithBlockedIpAddressesAPIErrorHandler inject ErrorHandler into controller
func WithBlockedIpAddressesAPIErrorHandler(h ErrorHandler) BlockedIpAddressesAPIOption {
	return func(c *BlockedIpAddressesAPIController) {
		c.errorHandler = h
	}
}

// NewBlockedIpAddressesAPIController creates a default api controller
func NewBlockedIpAddressesAPIController(s BlockedIpAddressesAPIServicer, opts ...BlockedIpAddressesAPIOption) Router {
	controller := &BlockedIpAddressesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BlockedIpAddressesAPIController
func (c *BlockedIpAddressesAPIController) Routes() Routes {
	return Routes{
		"BlockIpAddress": Route{
			strings.ToUpper("Post"),
			"/v1/services/{serviceId}/blocks",
			c.BlockIpAddress,
		},
		"GetBlockedIpAddress": Route{
			strings.ToUpper("Get"),
			"/v1/services/{serviceId}/blocks/{ipAddress}",
			c.GetBlockedIpAddress,
		},
		"ListBlockedIpAddresses": Route{
			strings.ToUpper("Get"),
			"/v1/services/{serviceId}/blocks",
			c.ListBlockedIpAddresses,
		},
		"UnblockIpAddress": Route{
			strings.ToUpper("Delete"),
			"/v1/services/{serviceId}/blocks/{ipAddress}",
			c.UnblockIpAddress,
		},
	}
}

// BlockIpAddress - Generate a new IP address blocked for a service
func (c *BlockedIpAddressesAPIController) BlockIpAddress(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	blockedIpAddressInputParam := BlockedIpAddressInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&blockedIpAddressInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBlockedIpAddressInputRequired(blockedIpAddressInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBlockedIpAddressInputConstraints(blockedIpAddressInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BlockIpAddress(r.Context(), serviceIdParam, blockedIpAddressInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBlockedIpAddress - Retrieve an Ip address block
func (c *BlockedIpAddressesAPIController) GetBlockedIpAddress(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	ipAddressParam := chi.URLParam(r, "ipAddress")
	if ipAddressParam == "" {
		c.errorHandler(w, r, &RequiredError{"ipAddress"}, nil)
		return
	}
	result, err := c.service.GetBlockedIpAddress(r.Context(), serviceIdParam, ipAddressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBlockedIpAddresses - List all blocked IP addresses for a service
func (c *BlockedIpAddressesAPIController) ListBlockedIpAddresses(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	result, err := c.service.ListBlockedIpAddresses(r.Context(), serviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UnblockIpAddress - Remove a specific IP address block
func (c *BlockedIpAddressesAPIController) UnblockIpAddress(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	ipAddressParam := chi.URLParam(r, "ipAddress")
	if ipAddressParam == "" {
		c.errorHandler(w, r, &RequiredError{"ipAddress"}, nil)
		return
	}
	result, err := c.service.UnblockIpAddress(r.Context(), serviceIdParam, ipAddressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
