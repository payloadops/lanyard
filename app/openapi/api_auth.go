// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service      AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) Router {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"ServicesServiceIdAuthPost": Route{
			strings.ToUpper("Post"),
			"/v1/services/{serviceId}/auth",
			c.ServicesServiceIdAuthPost,
		},
	}
}

// ServicesServiceIdAuthPost - Authorize a request
func (c *AuthAPIController) ServicesServiceIdAuthPost(w http.ResponseWriter, r *http.Request) {
	serviceIdParam := chi.URLParam(r, "serviceId")
	if serviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serviceId"}, nil)
		return
	}
	servicesServiceIdAuthPostRequestParam := ServicesServiceIdAuthPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&servicesServiceIdAuthPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServicesServiceIdAuthPostRequestRequired(servicesServiceIdAuthPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServicesServiceIdAuthPostRequestConstraints(servicesServiceIdAuthPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ServicesServiceIdAuthPost(r.Context(), serviceIdParam, servicesServiceIdAuthPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
