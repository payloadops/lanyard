// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"net/http"
	"strings"
)

// HealthCheckAPIController binds http requests to an api service and writes the service results to the http response
type HealthCheckAPIController struct {
	service      HealthCheckAPIServicer
	errorHandler ErrorHandler
}

// HealthCheckAPIOption for how the controller is set up.
type HealthCheckAPIOption func(*HealthCheckAPIController)

// WithHealthCheckAPIErrorHandler inject ErrorHandler into controller
func WithHealthCheckAPIErrorHandler(h ErrorHandler) HealthCheckAPIOption {
	return func(c *HealthCheckAPIController) {
		c.errorHandler = h
	}
}

// NewHealthCheckAPIController creates a default api controller
func NewHealthCheckAPIController(s HealthCheckAPIServicer, opts ...HealthCheckAPIOption) Router {
	controller := &HealthCheckAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HealthCheckAPIController
func (c *HealthCheckAPIController) Routes() Routes {
	return Routes{
		"HealthCheck": Route{
			strings.ToUpper("Get"),
			"/v1/health",
			c.HealthCheck,
		},
	}
}

// HealthCheck - Health Check Endpoint
func (c *HealthCheckAPIController) HealthCheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HealthCheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
