// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lanyard Ops API
 *
 * The Lanyard Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// OrganizationsAPIController binds http requests to an api service and writes the service results to the http response
type OrganizationsAPIController struct {
	service      OrganizationsAPIServicer
	errorHandler ErrorHandler
}

// OrganizationsAPIOption for how the controller is set up.
type OrganizationsAPIOption func(*OrganizationsAPIController)

// WithOrganizationsAPIErrorHandler inject ErrorHandler into controller
func WithOrganizationsAPIErrorHandler(h ErrorHandler) OrganizationsAPIOption {
	return func(c *OrganizationsAPIController) {
		c.errorHandler = h
	}
}

// NewOrganizationsAPIController creates a default api controller
func NewOrganizationsAPIController(s OrganizationsAPIServicer, opts ...OrganizationsAPIOption) Router {
	controller := &OrganizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrganizationsAPIController
func (c *OrganizationsAPIController) Routes() Routes {
	return Routes{
		"OrganizationsOrganizationIdDelete": Route{
			strings.ToUpper("Delete"),
			"/v1/organizations/{organizationId}",
			c.OrganizationsOrganizationIdDelete,
		},
		"OrganizationsOrganizationIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/organizations/{organizationId}",
			c.OrganizationsOrganizationIdGet,
		},
		"OrganizationsOrganizationIdPut": Route{
			strings.ToUpper("Put"),
			"/v1/organizations/{organizationId}",
			c.OrganizationsOrganizationIdPut,
		},
		"OrganizationsPost": Route{
			strings.ToUpper("Post"),
			"/v1/organizations",
			c.OrganizationsPost,
		},
	}
}

// OrganizationsOrganizationIdDelete - Remove an organization
func (c *OrganizationsAPIController) OrganizationsOrganizationIdDelete(w http.ResponseWriter, r *http.Request) {
	organizationIdParam := chi.URLParam(r, "organizationId")
	if organizationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"organizationId"}, nil)
		return
	}
	result, err := c.service.OrganizationsOrganizationIdDelete(r.Context(), organizationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OrganizationsOrganizationIdGet - Get the organization
func (c *OrganizationsAPIController) OrganizationsOrganizationIdGet(w http.ResponseWriter, r *http.Request) {
	organizationIdParam := chi.URLParam(r, "organizationId")
	if organizationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"organizationId"}, nil)
		return
	}
	result, err := c.service.OrganizationsOrganizationIdGet(r.Context(), organizationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OrganizationsOrganizationIdPut - Update an organization
func (c *OrganizationsAPIController) OrganizationsOrganizationIdPut(w http.ResponseWriter, r *http.Request) {
	organizationIdParam := chi.URLParam(r, "organizationId")
	if organizationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"organizationId"}, nil)
		return
	}
	organizationInputParam := OrganizationInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationInputRequired(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationInputConstraints(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OrganizationsOrganizationIdPut(r.Context(), organizationIdParam, organizationInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OrganizationsPost - Creates an organization
func (c *OrganizationsAPIController) OrganizationsPost(w http.ResponseWriter, r *http.Request) {
	organizationInputParam := OrganizationInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationInputRequired(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationInputConstraints(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OrganizationsPost(r.Context(), organizationInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
