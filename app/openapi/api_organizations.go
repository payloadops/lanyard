// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// OrganizationsAPIController binds http requests to an api service and writes the service results to the http response
type OrganizationsAPIController struct {
	service      OrganizationsAPIServicer
	errorHandler ErrorHandler
}

// OrganizationsAPIOption for how the controller is set up.
type OrganizationsAPIOption func(*OrganizationsAPIController)

// WithOrganizationsAPIErrorHandler inject ErrorHandler into controller
func WithOrganizationsAPIErrorHandler(h ErrorHandler) OrganizationsAPIOption {
	return func(c *OrganizationsAPIController) {
		c.errorHandler = h
	}
}

// NewOrganizationsAPIController creates a default api controller
func NewOrganizationsAPIController(s OrganizationsAPIServicer, opts ...OrganizationsAPIOption) Router {
	controller := &OrganizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrganizationsAPIController
func (c *OrganizationsAPIController) Routes() Routes {
	return Routes{
		"CreateOrganization": Route{
			strings.ToUpper("Post"),
			"/v1/organizations",
			c.CreateOrganization,
		},
		"DeleteOrganization": Route{
			strings.ToUpper("Delete"),
			"/v1/organizations/{orgId}",
			c.DeleteOrganization,
		},
		"GetOrganization": Route{
			strings.ToUpper("Get"),
			"/v1/organizations/{orgId}",
			c.GetOrganization,
		},
		"ListOrganizations": Route{
			strings.ToUpper("Get"),
			"/v1/organizations",
			c.ListOrganizations,
		},
		"UpdateOrganization": Route{
			strings.ToUpper("Put"),
			"/v1/organizations/{orgId}",
			c.UpdateOrganization,
		},
	}
}

// CreateOrganization - Create a new organization
func (c *OrganizationsAPIController) CreateOrganization(w http.ResponseWriter, r *http.Request) {
	organizationInputParam := OrganizationInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationInputRequired(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationInputConstraints(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrganization(r.Context(), organizationInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOrganization - Delete a specific organization
func (c *OrganizationsAPIController) DeleteOrganization(w http.ResponseWriter, r *http.Request) {
	orgIdParam := chi.URLParam(r, "orgId")
	if orgIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"orgId"}, nil)
		return
	}
	result, err := c.service.DeleteOrganization(r.Context(), orgIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganization - Get a specific organization
func (c *OrganizationsAPIController) GetOrganization(w http.ResponseWriter, r *http.Request) {
	orgIdParam := chi.URLParam(r, "orgId")
	if orgIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"orgId"}, nil)
		return
	}
	result, err := c.service.GetOrganization(r.Context(), orgIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListOrganizations - List all organizations
func (c *OrganizationsAPIController) ListOrganizations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListOrganizations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrganization - Update a specific organization
func (c *OrganizationsAPIController) UpdateOrganization(w http.ResponseWriter, r *http.Request) {
	orgIdParam := chi.URLParam(r, "orgId")
	if orgIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"orgId"}, nil)
		return
	}
	organizationInputParam := OrganizationInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&organizationInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrganizationInputRequired(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrganizationInputConstraints(organizationInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrganization(r.Context(), orgIdParam, organizationInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
