// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Lanyard Ops API
 *
 * The Lanyard Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"context"
	"net/http"
)

// APIKeysAPIRouter defines the required methods for binding the api requests to a responses for the APIKeysAPI
// The APIKeysAPIRouter implementation should parse necessary information from the http request,
// pass the data to a APIKeysAPIServicer to perform the required actions, then write the service results to the http response.
type APIKeysAPIRouter interface {
	AuthApiKey(http.ResponseWriter, *http.Request)
	DeleteApiKey(http.ResponseWriter, *http.Request)
	GenerateApiKey(http.ResponseWriter, *http.Request)
	GetApiKey(http.ResponseWriter, *http.Request)
	ListApiKeys(http.ResponseWriter, *http.Request)
	UpdateApiKey(http.ResponseWriter, *http.Request)
}

// ActorsAPIRouter defines the required methods for binding the api requests to a responses for the ActorsAPI
// The ActorsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ActorsAPIServicer to perform the required actions, then write the service results to the http response.
type ActorsAPIRouter interface {
	ServicesServiceIdActorsActorIdDelete(http.ResponseWriter, *http.Request)
	ServicesServiceIdActorsActorIdGet(http.ResponseWriter, *http.Request)
	ServicesServiceIdActorsActorIdPut(http.ResponseWriter, *http.Request)
	ServicesServiceIdActorsGet(http.ResponseWriter, *http.Request)
	ServicesServiceIdActorsPost(http.ResponseWriter, *http.Request)
}

// HealthCheckAPIRouter defines the required methods for binding the api requests to a responses for the HealthCheckAPI
// The HealthCheckAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HealthCheckAPIServicer to perform the required actions, then write the service results to the http response.
type HealthCheckAPIRouter interface {
	HealthCheck(http.ResponseWriter, *http.Request)
}

// PricingTierAPIRouter defines the required methods for binding the api requests to a responses for the PricingTierAPI
// The PricingTierAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PricingTierAPIServicer to perform the required actions, then write the service results to the http response.
type PricingTierAPIRouter interface {
	ServicesServiceIdPricingTiersGet(http.ResponseWriter, *http.Request)
	ServicesServiceIdPricingTiersPost(http.ResponseWriter, *http.Request)
	ServicesServiceIdPricingTiersTierIdDelete(http.ResponseWriter, *http.Request)
	ServicesServiceIdPricingTiersTierIdGet(http.ResponseWriter, *http.Request)
	ServicesServiceIdPricingTiersTierIdPut(http.ResponseWriter, *http.Request)
}

// ServicesAPIRouter defines the required methods for binding the api requests to a responses for the ServicesAPI
// The ServicesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServicesAPIServicer to perform the required actions, then write the service results to the http response.
type ServicesAPIRouter interface {
	CreateService(http.ResponseWriter, *http.Request)
	DeleteService(http.ResponseWriter, *http.Request)
	GetService(http.ResponseWriter, *http.Request)
	Listservices(http.ResponseWriter, *http.Request)
	UpdateService(http.ResponseWriter, *http.Request)
}

// APIKeysAPIServicer defines the api actions for the APIKeysAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type APIKeysAPIServicer interface {
	AuthApiKey(context.Context, string, string, AuthApiKeyRequest) (ImplResponse, error)
	DeleteApiKey(context.Context, string, string) (ImplResponse, error)
	GenerateApiKey(context.Context, string, ApiKeyInput) (ImplResponse, error)
	GetApiKey(context.Context, string, string) (ImplResponse, error)
	ListApiKeys(context.Context, string) (ImplResponse, error)
	UpdateApiKey(context.Context, string, string, ApiKeyInput) (ImplResponse, error)
}

// ActorsAPIServicer defines the api actions for the ActorsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ActorsAPIServicer interface {
	ServicesServiceIdActorsActorIdDelete(context.Context, string, string) (ImplResponse, error)
	ServicesServiceIdActorsActorIdGet(context.Context, string, string) (ImplResponse, error)
	ServicesServiceIdActorsActorIdPut(context.Context, string, string, ActorInput) (ImplResponse, error)
	ServicesServiceIdActorsGet(context.Context, string) (ImplResponse, error)
	ServicesServiceIdActorsPost(context.Context, string, ActorInput) (ImplResponse, error)
}

// HealthCheckAPIServicer defines the api actions for the HealthCheckAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HealthCheckAPIServicer interface {
	HealthCheck(context.Context) (ImplResponse, error)
}

// PricingTierAPIServicer defines the api actions for the PricingTierAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PricingTierAPIServicer interface {
	ServicesServiceIdPricingTiersGet(context.Context, string) (ImplResponse, error)
	ServicesServiceIdPricingTiersPost(context.Context, string, PricingTierInput) (ImplResponse, error)
	ServicesServiceIdPricingTiersTierIdDelete(context.Context, string, string) (ImplResponse, error)
	ServicesServiceIdPricingTiersTierIdGet(context.Context, string, string) (ImplResponse, error)
	ServicesServiceIdPricingTiersTierIdPut(context.Context, string, string, PricingTierInput) (ImplResponse, error)
}

// ServicesAPIServicer defines the api actions for the ServicesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServicesAPIServicer interface {
	CreateService(context.Context, ServiceInput) (ImplResponse, error)
	DeleteService(context.Context, string) (ImplResponse, error)
	GetService(context.Context, string) (ImplResponse, error)
	Listservices(context.Context) (ImplResponse, error)
	UpdateService(context.Context, string, ServiceInput) (ImplResponse, error)
}
