generator client {
  provider = "go run github.com/steebchen/prisma-client-go"
  output   = "./pkg/generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Organization {
  id               String    @id @default(uuid()) @map("org_id")
  organizationName String    @map("organization_name")
  teams            Team[]
  users            User[]
  ApiKey           ApiKey[]
  Project          Project[]

  @@map("organizations")
}

model Team {
  id             String       @id @default(uuid()) @map("team_id")
  teamName       String       @map("team_name")
  organizationId String       @map("org_id")
  projects       Project[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  UserTeam       UserTeam[]
  users          User[]       @relation("UserTeams")
  ApiKey         ApiKey[]

  @@map("teams")
}

model User {
  id             String        @id @default(uuid()) @map("user_id")
  userName       String        @map("user_name")
  email          String        @unique @map("email")
  organizationId String?
  UserTeam       UserTeam[]
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  teams          Team[]        @relation("UserTeams")

  @@map("users")
}

model UserTeam {
  userId String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
  @@map("user_teams")
}

model Project {
  id           String       @id @default(uuid()) @map("project_id")
  projectName  String       @map("project_name")
  teamId       String       @map("team_id")
  orgId        String       @map("org_id")
  organization Organization @relation(fields: [orgId], references: [id])
  apiKeys      ApiKey[]
  team         Team         @relation(fields: [teamId], references: [id])
  prompts      Prompt[]

  @@map("projects")
}

model Prompt {
  id           String  @id @default(uuid()) @map("prompt_id")
  projectId    String  @map("project_id")
  promptS3Path String  @map("prompt_s3_path")
  deleted      Boolean @map("deleted")
  version      String
  project      Project @relation(fields: [projectId], references: [id])

  @@map("prompts")
}

// Define the ApiKeys table with string IDs
model ApiKey {
  apiKey         String       @id @map("api_key")
  projectId      String       @map("project_id")
  project        Project      @relation(fields: [projectId], references: [id])
  teamId         String       @map("team_id") // Added teamId
  team           Team         @relation(fields: [teamId], references: [id])
  orgId          String       @map("org_id") // Added orgId
  organization   Organization @relation(fields: [orgId], references: [id])
  keyDescription String       @map("key_description")
  rateLimit      Int          @map("rate_limit")
  active         Boolean      @map("active")
  scopes         String[]     @default([]) @map("scopes")

  @@map("api_keys")
}
