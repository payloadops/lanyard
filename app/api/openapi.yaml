openapi: 3.0.0
info:
  contact:
    email: info@payloadops.com
    name: Lanyard Ops Team
  description: "The Lanyard Ops API simplifies API key management for organizations\
    \ by providing powerful tools to create, manage, and monitor API access securely.\
    \ It allows teams to generate scoped API keys, configure rate limits, track usage,\
    \ and integrate seamlessly with existing services."
  title: Lanyard Ops API
  version: "1.0"
servers:
- description: Production server (uses live data)
  url: https://api.payloadops.com/v1
- description: Sandbox server (uses test data)
  url: https://sandbox-api.payloadops.com/v1
security:
- ApiKeyAuth: []
- BearerAuth: []
paths:
  /health:
    get:
      description: |
        Confirms API operability by checking system metrics and infrastructure like database connections.
      operationId: healthCheck
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckSuccessResponse'
          description: "API is healthy and fully operational, with all necessary components\
            \ (like databases) connected and functioning."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckErrorResponse'
          description: "API is experiencing issues, indicating that one or more components\
            \ are not functioning correctly."
      summary: Health Check Endpoint
      tags:
      - Health Check
  /services:
    get:
      description: |
        Lists all services.
      operationId: listservices
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: "Successfully retrieved a list of all services, each represented\
            \ with basic details like service ID, name, and description."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the listing of services."
      security:
      - BearerAuth: []
      summary: List all services
      tags:
      - Services
    post:
      description: |
        Adds a new service to the system with given parameters.
      operationId: createService
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the necessary information for creating a new service,\
          \ such as the service name, description, and other relevant settings."
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "The service was created successfully, with details of the\
            \ new service provided in the response."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request due to invalid input, such as incomplete data\
            \ fields or improper values."
      security:
      - BearerAuth: []
      summary: Create a new service
      tags:
      - Services
  /services/{serviceId}:
    delete:
      description: |
        Removes a specified service and all associated data.
      operationId: deleteService
      parameters:
      - description: The unique identifier of the service to be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "service deleted successfully, with no remaining data stored."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to delete.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the service."
      security:
      - BearerAuth: []
      summary: Delete a service
      tags:
      - Services
    get:
      description: |
        Retrieves details for a specified service.
      operationId: getService
      parameters:
      - description: The unique identifier of the service to retrieve.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Detailed information about the service retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the service."
      security:
      - BearerAuth: []
      summary: Retrieve a service by ID
      tags:
      - Services
    put:
      description: |
        Updates details for a specified service.
      operationId: updateService
      parameters:
      - description: The unique identifier of the service to be updated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the new details for the service, which may include\
          \ the name, description, and other relevant settings."
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "service updated successfully, reflecting new settings and\
            \ configurations."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request due to invalid input or missing required fields.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to update.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the service."
      security:
      - BearerAuth: []
      summary: Update a service
      tags:
      - Services
  /services/{serviceId}/blocks:
    get:
      description: |
        Lists all Blocked Ip addresses for a specified service.
      operationId: listBlockedIpAddresses
      parameters:
      - description: The unique identifier of the service whose blocked Ip addresses
          are to be listed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/BlockedIpAddress'
                type: array
          description: Successfully retrieved a list of blocked IP addresses for the
            service.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified service was not found, indicating an invalid\
            \ service ID."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of blocked\
            \ IP addresses."
      security:
      - BearerAuth: []
      summary: List all blocked IP addresses for a service
      tags:
      - Blocked Ip Addresses
    post:
      description: |
        Block a new IP address with given parameters.
      operationId: blockIpAddress
      parameters:
      - description: The identifier of the service for which the Ip address is being
          blocked.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/BlockedIpAddressInput'
        description: Contains the scope IP address block information.
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/BlockedIpAddress'
          description: New IP address block created successfully. The block details
            are included in the response.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid request, such as missing required fields or invalid\
            \ scope specifications."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the generation of the\
            \ block."
      security:
      - BearerAuth: []
      summary: Generate a new IP address blocked for a service
      tags:
      - Blocked Ip Addresses
  /services/{serviceId}/blocks/{ipAddress}:
    delete:
      description: |
        Removes the block on the specified Ip address.
      operationId: unblockIpAddress
      parameters:
      - description: The unique identifier of the service from which the block will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Ip address to be unblocked.
        explode: false
        in: path
        name: ipAddress
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The IP address block was removed successfully, no content\
            \ returned."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the IP address or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the IP\
            \ address block."
      security:
      - BearerAuth: []
      summary: Remove a specific IP address block
      tags:
      - Blocked Ip Addresses
    get:
      description: |
        Retrieves the specified IP address block.
      operationId: getBlockedIpAddress
      parameters:
      - description: The unique identifier of the service associated with the IP address
          block.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the Ip address block to be retrieved.
        explode: false
        in: path
        name: ipAddress
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/BlockedIpAddress'
          description: Detailed information about the IP address block retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the specified IP address block or the service was not
            found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the IP\
            \ address block."
      security:
      - BearerAuth: []
      summary: Retrieve an Ip address block
      tags:
      - Blocked Ip Addresses
  /services/{serviceId}/keys:
    get:
      description: |
        Lists all API keys for a specified service.
      operationId: listApiKeys
      parameters:
      - description: The unique identifier of the service whose API keys are to be
          listed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successfully retrieved a list of API keys for the service.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified service was not found, indicating an invalid\
            \ service ID."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of API keys."
      security:
      - BearerAuth: []
      summary: List all API keys for a service
      tags:
      - API Keys
    post:
      description: |
        Generates a new API key with given parameters.
      operationId: generateApiKey
      parameters:
      - description: The identifier of the service for which the API key is being
          generated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: Contains the scope definitions for the new API key.
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: New API key generated successfully. The key details are included
            in the response.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid request, such as missing required fields or invalid\
            \ scope specifications."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the generation of the\
            \ API key."
      security:
      - BearerAuth: []
      summary: Generate a new API key with specific scopes for a service
      tags:
      - API Keys
  /services/{serviceId}/keys/{keyId}:
    delete:
      description: |
        Deletes the specified API key.
      operationId: deleteApiKey
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The API key was deleted successfully, no content returned."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Delete a specific API key
      tags:
      - API Keys
    get:
      description: |
        Retrieves the specified API key.
      operationId: getApiKey
      parameters:
      - description: The unique identifier of the service associated with the API
          key.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to retrieve.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Detailed information about the API key retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the specified API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Retrieve a specific API key
      tags:
      - API Keys
    put:
      description: |
        Updates the specified API key with the given parameters.
      operationId: updateApiKey
      parameters:
      - description: The unique identifier of the service for which the API key is
          managed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be updated.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: JSON payload containing the new scopes for the API key.
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The API key's scopes were updated successfully.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid input, such as unspecified or unsupported scopes."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Update an API key's scopes
      tags:
      - API Keys
  /services/{serviceId}/actors:
    get:
      description: |
        Retrieves a list of all actors (users, applications, etc.) associated with a specific service.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Actor'
                type: array
          description: A list of actors associated with the service
        "404":
          description: Service not found
      summary: Retrieve all actors associated with a service
      tags:
      - Actors
    post:
      description: |
        Adds a new actor to the specified service. The actor can represent a user, application, or another entity that interacts with the API.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
        description: Details of the actor to be added
        required: true
      responses:
        "201":
          description: Actor successfully added to the service
        "400":
          description: Invalid input
        "404":
          description: Service not found
      summary: Add an actor to a service
      tags:
      - Actors
  /services/{serviceId}/actors/{actorId}:
    delete:
      description: |
        Removes an actor from the specified service.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the actor
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Actor successfully removed
        "404":
          description: Actor or service not found
      summary: Remove an actor from a service
      tags:
      - Actors
    get:
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Get the actor
      tags:
      - Actors
    put:
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
        description: Updated pricing tier details
        required: true
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Update an actor
      tags:
      - Actors
  /services/{serviceId}/pricing-tiers:
    get:
      description: |
        Returns the pricing tier associated with a specific service, including its limits, features, and pricing details.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingTier'
          description: The pricing tier associated with the service
        "404":
          description: Service or pricing tier not found
      summary: Retrieve the pricing tier for a service
      tags:
      - Pricing Tier
    post:
      description: "Assigns a pricing tier to a service, setting the limits, features,\
        \ and pricing that the service will follow. \n"
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
        description: Pricing tier details to be assigned to the service
        required: true
      responses:
        "201":
          description: Pricing tier successfully assigned to the service
        "400":
          description: Invalid input
        "404":
          description: Service not found
      summary: Assign a pricing tier to a service
      tags:
      - Pricing Tier
  /services/{serviceId}/pricing-tiers/{tierId}:
    delete:
      description: |
        Removes the pricing tier from a service. After the removal, the service may default to a base or free tier, depending on the configuration.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Pricing tier successfully removed from the service
        "404":
          description: Service or pricing tier not found
      summary: Remove a pricing tier from a service
      tags:
      - Pricing Tier
    get:
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Get the pricing tier for a service
      tags:
      - Pricing Tier
    put:
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
        description: Updated pricing tier details
        required: true
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Update the pricing tier for a service
      tags:
      - Pricing Tier
  /services/{serviceId}/key/{keyId}/auth:
    post:
      description: |
        Authorizes an incoming API request by validating the provided API key.
      operationId: authApiKey
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authApiKey_request'
        description: API key or token to be authorized
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authApiKey_200_response'
          description: The request is authorized and scopes are returned
        "401":
          description: Unauthorized request
      summary: Auth a request per given API key
      tags:
      - API Keys
components:
  schemas:
    BlockedIpAddress:
      description: Information of blocked IP address and reason
      properties:
        ipAddress:
          description: IP address to be blocked
          type: string
        reason:
          description: Reason why the IP address was blocked
          type: string
        createdAt:
          description: The date when the block was created
          format: date-time
          type: string
      type: object
    BlockedIpAddressInput:
      description: Information of blocked IP address and reason
      properties:
        ipAddress:
          description: IP address to be blocked
          type: string
        reason:
          description: Reason why the IP address was blocked
          type: string
      type: object
    BillingInfo:
      description: "Billing information, including pricing tier and trial expiration\
        \ date"
      properties:
        tier:
          description: Pricing tier of the API key
          type: string
        tierId:
          description: ID of pricing tier
          type: string
        trialExpiry:
          description: The date when the trial period ends
          format: date-time
          type: string
        isTrialActive:
          description: Indicates whether the trial period is currently active for
            this actor
          type: boolean
        isTrialElgible:
          description: Indicates whether the actor is eligble for a trial period
          type: boolean
      type: object
    PricingTier:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      example:
        overagePrice: 6.0274563
        defaultMonthlyRequestLimit: 0
        defaultRateLimit: ""
        name: name
        id: id
      properties:
        id:
          description: Unique identifier for the pricing tier
          type: string
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: The maximum number of API requests allowed per month
          type: integer
        defaultRateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for the tier (requests per second
            or minute)
        overagePrice:
          description: The price per extra request beyond the monthly limit
          format: float
          type: number
    PricingTierInput:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      example:
        overagePrice: 6.0274563
        defaultMonthlyRequestLimit: 0
        defaultRateLimit: ""
        name: name
      properties:
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: The maximum number of API requests allowed per month
          type: integer
        defaultRateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for the tier (requests per second
            or minute)
        overagePrice:
          description: The price per extra request beyond the monthly limit
          format: float
          type: number
    RateLimit:
      description: Rate limit configuration for this API key
      properties:
        name:
          description: The name of the rate limit
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: The number of allowed requests in the defined time window
          type: integer
        duration:
          description: "Time window for the rate limit, specified in ISO duration\
            \ format (e.g., '1h', '30m')"
          type: string
      type: object
    RateLimitInput:
      description: Rate limit configuration for this API key
      properties:
        name:
          description: The name of the rate limit
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: The number of allowed requests in the defined time window
          type: integer
        window:
          description: "Time window for the rate limit, specified in ISO duration\
            \ format (e.g., '1h', '30m')"
          type: string
      type: object
    KSUID:
      description: A K-sortable unique identifier (KSUID)
      maxLength: 27
      minLength: 27
      pattern: "^[A-Za-z0-9]{27}$"
      type: string
    HealthCheckSuccessResponse:
      example:
        status: healthy
      properties:
        status:
          example: healthy
          type: string
      type: object
    HealthCheckErrorResponse:
      example:
        status: unhealthy
      properties:
        status:
          example: unhealthy
          type: string
      type: object
    Service:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: ""
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the service
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        blockedIpAddresses:
          description: List of blocked IP addresses
          items:
            type: string
          type: array
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
        createdAt:
          description: Timestamp when the service was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the service was last updated
          format: date-time
          type: string
      type: object
    ServiceInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
        blockedIpAddresses:
          description: List of blocked IP addresses
          items:
            type: string
          type: array
      required:
      - name
      type: object
    Actor:
      example:
        id: ""
        externalId: ""
        rateLimit: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: Billing info for actor
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
      type: object
    ActorInput:
      example:
        externalId: ""
        rateLimit: ""
      properties:
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: Billing info for actor
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
      type: object
    ApiKey:
      example:
        createdAt: 2023-09-14T12:00:00.000Z
        id: ksu1example
        secret: newSecretKey123
        scopes:
        - read
        - write
        serviceId: serviceId123
        actorId: actorId456
        updatedAt: 2023-09-14T12:00:00.000Z
        name: Example API Key
        rateLimit:
          type: basic
          maxRequestsPerHour: 1000
        billingInfo:
          tier: pro
          trialExpiry: 2023-10-14T12:00:00.000Z
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        secret:
          description: The API key token
          maxLength: 180
          minLength: 1
          type: string
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for this API key
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        createdAt:
          description: Timestamp when the API key was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the API key was last updated
          format: date-time
          type: string
        name:
          description: Name of the API key
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration\
            \ date"
        expiry:
          description: Optional expiration date for the API key
          format: date-time
          type: string
      type: object
    ApiKeyInput:
      properties:
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for this API key
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        name:
          description: Name of the API key
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration\
            \ date"
        expiry:
          description: Optional expiration date for the API key
          format: date-time
          type: string
      required:
      - actorId
      - name
      - serviceId
      type: object
    Error:
      example:
        error: error
      properties:
        error:
          description: Message describing the error that occurred
          type: string
      type: object
    authApiKey_request:
      properties:
        secret:
          description: The API key provided by the client
          type: string
        actorExternalId:
          description: ""
          type: string
        requiredRoles:
          description: The API key provided by the client
          items:
            type: string
          type: array
        requiredScopes:
          description: The API key provided by the client
          items:
            type: string
          type: array
      type: object
    authApiKey_200_response_rateLimit:
      example:
        limit: 1
        reset: 6
        remaining: 5
      properties:
        reset:
          type: integer
        limit:
          type: integer
        remaining:
          type: integer
      type: object
    authApiKey_200_response:
      example:
        rateLimit:
          limit: 1
          reset: 6
          remaining: 5
        authorized: true
        message: message
        remaining: 0
      properties:
        authorized:
          type: boolean
        message:
          type: string
        remaining:
          type: integer
        rateLimit:
          $ref: '#/components/schemas/authApiKey_200_response_rateLimit'
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |
        API Key authentication provides a straightforward method for clients to authenticate requests. This scheme expects an API key to be supplied in the headers of each request. Clients must include the API key in the 'X-API-KEY' header field.

        **How to use**:
        - Obtain an API key from the API provider.
        - Include the API key in the header of each request to the API as follows:
          ```
          X-API-KEY: {api_key}
          ```
        - The API validates the key against its database, and if the key is valid, allows access to the requested resources.
      in: header
      name: X-API-KEY
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: |
        Bearer Token authentication uses JSON Web Tokens (JWT) to verify the identity of the requester. This scheme is included in the Authorization header of each HTTP request using the Bearer format.

        **How to use**:
        - Obtain a JWT from the authentication server. Typically, this involves an initial request with credentials (username/password) to receive the token.
        - Include the token in the Authorization header of your HTTP requests as follows:
          ```
          Authorization: Bearer {token}
          ```
        - The server decodes the JWT to verify its validity and authorizes the request based on the token's payload and signature.

        **Example**:
        To access protected routes or resources, the client must authenticate by providing the JWT in the authorization header:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiw
      scheme: bearer
      type: http
