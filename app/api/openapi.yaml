openapi: 3.0.0
info:
  contact:
    email: info@payloadops.com
    name: Payload Ops Team
  description: "The Payload Ops API simplifies API key management for organizations\
    \ by providing powerful tools to create, manage, and monitor API access securely.\
    \ It allows teams to generate scoped API keys, configure rate limits, track usage,\
    \ and integrate seamlessly with existing services."
  title: Payload Ops API
  version: "1.0"
servers:
- description: Production server (uses live data)
  url: https://api.payloadops.com/v1
- description: Sandbox server (uses test data)
  url: https://sandbox-api.payloadops.com/v1
security:
- ApiKeyAuth: []
- BearerAuth: []
paths:
  /health:
    get:
      description: |
        This endpoint performs a health check of the API, quickly assessing and returning the operational status. It is designed to monitor critical system metrics and infrastructure components, such as database connections and system uptime, ensuring that the API is functioning properly. This endpoint is vital for operational monitoring, particularly in production environments where reliability is crucial.

        **Key Features**:
        - **Immediate Health Status**: Quickly assesses the overall health of the API by checking essential components and dependencies, such as database connectivity and server uptime.
        - **Operational Monitoring**: Used by monitoring systems, load balancers, and during deployment processes to ensure that the API is operational and performing as expected.

        **Use Cases**:
        - **Continuous Monitoring**: Automatically monitored by systems operations teams to detect and respond to issues promptly.
        - **Deployment Verification**: Checked post-deployment to confirm that the API is fully operational in its deployed environment.

        **Response Details**:
        - A successful response indicates that all checked components are operational.
        - An unsuccessful response identifies which components are experiencing issues, aiding in quick diagnostics and resolution.
      operationId: healthCheck
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckSuccessResponse'
          description: "API is healthy and fully operational, with all necessary components\
            \ (like databases) connected and functioning."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckErrorResponse'
          description: "API is experiencing issues, indicating that one or more components\
            \ are not functioning correctly."
      summary: Health Check Endpoint
      tags:
      - Health Check
  /services:
    get:
      description: |
        Retrieves a comprehensive list of all services within the system. This operation is crucial for users needing an overview of all existing services, including their basic metadata and status. It allows for effective management and navigation across different services, particularly useful in environments with multiple ongoing initiatives.

        **Key Features**:
        - **Broad Overview**: Provides a snapshot of all services, facilitating quick access and management decisions.
        - **Ease of Navigation**: Helps users identify and access specific services quickly, enhancing workflow efficiency.

        **Use Cases**:
        - Administrators monitoring the overall progress and status of all services.
        - Team members seeking to quickly find and access specific services they are working on or interested in.
      operationId: listservices
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: "Successfully retrieved a list of all services, each represented\
            \ with basic details like service ID, name, and description."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the listing of services."
      security:
      - BearerAuth: []
      summary: List all services
      tags:
      - Services
    post:
      description: |
        Creates a new service based on the provided details in the request. This endpoint facilitates the addition of new services into the system, allowing for the initiation of new initiatives or work streams within the organization.

        **Key Features**:
        - **service Initialization**: Enables the setup of new services, defining their scope, objectives, and other necessary details from the outset.
        - **Configurable Details**: Allows for detailed customization of service parameters such as name, description, and specific settings related to service management.

        **Use Cases**:
        - Starting new initiatives or phases in business operations.
        - Expanding the organization's portfolio by adding services that address new challenges or market opportunities.
      operationId: createservice
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the necessary information for creating a new service,\
          \ such as the service name, description, and other relevant settings."
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "The service was created successfully, with details of the\
            \ new service provided in the response."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request due to invalid input, such as incomplete data\
            \ fields or improper values."
      security:
      - BearerAuth: []
      summary: Create a new service
      tags:
      - Services
  /services/{serviceId}:
    delete:
      description: |
        Deletes a specific service using its unique ID, removing all data and settings associated with it. This operation is typically used when a service has been completed, or if it needs to be removed for organizational reasons.

        **Key Features**:
        - **Complete Removal**: Ensures that all service-related data is permanently deleted.
        - **Security Compliance**: Helps maintain data hygiene and compliance by allowing for the disposal of unnecessary or outdated services.

        **Use Cases**:
        - Removing services that are no longer active or required.
        - Cleaning up workspace and resources as part of service lifecycle management.
      operationId: deleteservice
      parameters:
      - description: The unique identifier of the service to be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "service deleted successfully, with no remaining data stored."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to delete.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the service."
      security:
      - BearerAuth: []
      summary: Delete a service
      tags:
      - Services
    get:
      description: |
        Retrieves detailed information about a specific service using its unique identifier. This operation is crucial for users who need to view the overall structure, settings, and details of the service, including its metadata, associated prompts, and configuration settings.

        **Key Features**:
        - **Comprehensive Details**: Provides all relevant information about the service, including descriptions, member roles, and other metadata.
        - **service Oversight**: Essential for service managers and team members to understand current service settings and status.

        **Use Cases**:
        - Service managers reviewing service settings and progress.
        - Team members accessing service details for integration with other tasks or for reporting purposes.
      operationId: getservice
      parameters:
      - description: The unique identifier of the service to retrieve.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Detailed information about the service retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the service."
      security:
      - BearerAuth: []
      summary: Retrieve a service by ID
      tags:
      - Services
    put:
      description: |
        Updates the specified service's details based on the provided input. This operation allows for modifications to service metadata such as the service name, description, and other configurable settings. It is vital for maintaining up-to-date information and adapting service settings to evolving requirements.

        **Key Features**:
        - **Flexible Modification**: Supports changes to most service attributes, facilitating dynamic service management.
        - **Adaptive Configuration**: Enables services to be adapted as team goals or business needs change.

        **Use Cases**:
        - Updating service details to reflect new directions or goals.
        - Modifying access controls or roles as team dynamics change.
      operationId: updateservice
      parameters:
      - description: The unique identifier of the service to be updated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the new details for the service, which may include\
          \ the name, description, and other relevant settings."
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "service updated successfully, reflecting new settings and\
            \ configurations."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request due to invalid input or missing required fields.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to update.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the service."
      security:
      - BearerAuth: []
      summary: Update a service
      tags:
      - Services
  /services/{serviceId}/keys:
    get:
      description: |
        Retrieves a list of all API keys associated with a specific service. This endpoint is essential for managing and reviewing the access provided to different services and users. It offers a comprehensive view of all keys, their scopes, and their statuses, which is critical for effective access management and security audits.

        **Features**:
        - **Comprehensive Overview**: Provides a complete listing of all API keys, facilitating audits and security reviews.
        - **Access Transparency**: Ensures that administrators can view and monitor the scopes and usage of each API key, aiding in proactive security practices.

        **Use Cases**:
        - Auditing API keys to ensure that they are up-to-date and have appropriate permissions.
        - Quickly identifying and managing keys that may need adjustments or revocation.
      operationId: listApiKeys
      parameters:
      - description: The unique identifier of the service whose API keys are to be
          listed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successfully retrieved a list of API keys for the service.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified service was not found, indicating an invalid\
            \ service ID."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of API keys."
      security:
      - BearerAuth: []
      summary: List all API keys for a service
      tags:
      - API Keys
    post:
      description: |
        Generates a new API key for a specific service with designated scopes. This operation is crucial for creating secure, scoped access to the service's resources. It allows administrators to define specific permissions, ensuring that API keys can only access appropriate endpoints as per their operational requirements.

        **Features**:
        - **Scoped Access**: Tailors access permissions to specific needs, enhancing security by limiting API key capabilities to necessary actions.
        - **Secure Management**: Generates keys in a secure manner, ensuring that they are only known to the requester and stored securely.

        **Use Cases**:
        - Provisioning a new service or system that requires access to the service.
        - Creating temporary access for automation scripts or third-party integrations.

        **Guidelines**:
        - Ensure to specify the necessary scopes in the request body to avoid overly permissive access.
        - Manage the lifecycle of API keys responsibly, revoking them when no longer needed.
      operationId: generateApiKey
      parameters:
      - description: The identifier of the service for which the API key is being
          generated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: Contains the scope definitions for the new API key.
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: New API key generated successfully. The key details are included
            in the response.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid request, such as missing required fields or invalid\
            \ scope specifications."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the generation of the\
            \ API key."
      security:
      - BearerAuth: []
      summary: Generate a new API key with specific scopes for a service
      tags:
      - API Keys
  /services/{serviceId}/keys/{keyId}:
    delete:
      description: |
        Deletes a specific API key from a service, permanently removing its access to the service resources. This operation is essential for maintaining security when an API key is no longer needed or if its permissions need to be revoked urgently.

        **Key Features**:
        - **Secure Cleanup**: Ensures that unused or compromised API keys are removed to prevent unauthorized access.
        - **Access Revocation**: Provides a method to immediately invalidate an API key when necessary.

        **Use Cases**:
        - Removing access for team members who no longer require it, such as after service completion or role changes.
        - Revoking keys that may have been exposed or compromised to maintain security integrity.
      operationId: deleteApiKey
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The API key was deleted successfully, no content returned."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Delete a specific API key
      tags:
      - API Keys
    get:
      description: |
        Retrieves detailed information about a specific API key associated with a service. This operation is crucial for managing access to service resources, allowing administrators to review the permissions and details of individual API keys.

        **Key Features**:
        - **Security Management**: Provides the ability to monitor and manage API access through detailed key information.
        - **Access Review**: Enables service managers to verify the scope and validity of an API key, ensuring that it aligns with current security policies.

        **Use Cases**:
        - Administrators auditing access permissions for compliance and security best practices.
        - Developers checking API key details to troubleshoot access issues or to ensure proper configuration.
      operationId: getApiKey
      parameters:
      - description: The unique identifier of the service associated with the API
          key.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to retrieve.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Detailed information about the API key retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the specified API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Retrieve a specific API key
      tags:
      - API Keys
    put:
      description: |
        Updates the scopes associated with a specific API key. This operation allows administrators to modify access levels and permissions for API keys, adapting to changing security needs or service requirements.

        **Key Features**:
        - **Scope Management**: Adjusts the access boundaries defined by the API key scopes, ensuring they are kept up-to-date with service roles and permissions.
        - **Flexible Access Control**: Offers the ability to dynamically change API key permissions without needing to recreate keys.

        **Use Cases**:
        - Modifying API key permissions in response to role changes within a service team.
        - Updating key scopes to restrict or expand access as part of security policy adjustments.
      operationId: updateApiKey
      parameters:
      - description: The unique identifier of the service for which the API key is
          managed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be updated.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: JSON payload containing the new scopes for the API key.
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The API key's scopes were updated successfully.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid input, such as unspecified or unsupported scopes."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Update an API key's scopes
      tags:
      - API Keys
  /services/{serviceId}/actors:
    get:
      description: |
        Retrieves a list of all actors (users, applications, etc.) associated with a specific service.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Actor'
                type: array
          description: A list of actors associated with the service
        "404":
          description: Service not found
      summary: Retrieve all actors associated with a service
      tags:
      - Actors
    post:
      description: |
        Adds a new actor to the specified service. The actor can represent a user, application, or another entity that interacts with the API.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
        description: Details of the actor to be added
        required: true
      responses:
        "201":
          description: Actor successfully added to the service
        "400":
          description: Invalid input
        "404":
          description: Service not found
      summary: Add an actor to a service
      tags:
      - Actors
  /services/{serviceId}/actors/{actorId}:
    delete:
      description: |
        Removes an actor from the specified service.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the actor
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Actor successfully removed
        "404":
          description: Actor or service not found
      summary: Remove an actor from a service
      tags:
      - Actors
    get:
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Get the actor
      tags:
      - Actors
    put:
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: actorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
        description: Updated pricing tier details
        required: true
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Update an actor
      tags:
      - Actors
  /services/{serviceId}/pricing-tiers:
    get:
      description: |
        Returns the pricing tier associated with a specific service, including its limits, features, and pricing details.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingTier'
          description: The pricing tier associated with the service
        "404":
          description: Service or pricing tier not found
      summary: Retrieve the pricing tier for a service
      tags:
      - Pricing Tier
    post:
      description: "Assigns a pricing tier to a service, setting the limits, features,\
        \ and pricing that the service will follow. \n"
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
        description: Pricing tier details to be assigned to the service
        required: true
      responses:
        "201":
          description: Pricing tier successfully assigned to the service
        "400":
          description: Invalid input
        "404":
          description: Service not found
      summary: Assign a pricing tier to a service
      tags:
      - Pricing Tier
  /services/{serviceId}/pricing-tiers/{tierId}:
    delete:
      description: |
        Removes the pricing tier from a service. After the removal, the service may default to a base or free tier, depending on the configuration.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Pricing tier successfully removed from the service
        "404":
          description: Service or pricing tier not found
      summary: Remove a pricing tier from a service
      tags:
      - Pricing Tier
    get:
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Get the pricing tier for a service
      tags:
      - Pricing Tier
    put:
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
      - description: The unique ID of the service
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique ID of the pricing tier
        explode: false
        in: path
        name: tierId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
        description: Updated pricing tier details
        required: true
      responses:
        "200":
          description: Pricing tier successfully updated for the service
        "404":
          description: Service or pricing tier not found
      summary: Update the pricing tier for a service
      tags:
      - Pricing Tier
  /services/{serviceId}/key/{keyId}/auth:
    post:
      description: |
        Authorizes an incoming API request by validating the provided API key.
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_services__serviceId__key__keyId__auth_post_request'
        description: API key or token to be authorized
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_services__serviceId__key__keyId__auth_post_200_response'
          description: The request is authorized and scopes are returned
        "401":
          description: Unauthorized request
      summary: Auth a request per given API key
      tags:
      - API Keys
components:
  schemas:
    BillingInfo:
      description: "Billing information, including pricing tier and trial expiration\
        \ date"
      properties:
        tier:
          description: Pricing tier of the API key
          type: string
        tierId:
          description: ID of pricing tier
          type: string
        trialExpiry:
          description: The date when the trial period ends
          format: date-time
          type: string
        isTrialActive:
          description: Indicates whether the trial period is currently active for
            this actor
          type: boolean
        isTrialElgible:
          description: Indicates whether the actor is eligble for a trial period
          type: boolean
      type: object
    PricingTier:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      example:
        overagePrice: 6.0274563
        defaultMonthlyRequestLimit: 0
        defaultRateLimit: ""
        name: name
        id: id
      properties:
        id:
          description: Unique identifier for the pricing tier
          type: string
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: The maximum number of API requests allowed per month
          type: integer
        defaultRateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for the tier (requests per second
            or minute)
        overagePrice:
          description: The price per extra request beyond the monthly limit
          format: float
          type: number
    PricingTierInput:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      example:
        overagePrice: 6.0274563
        defaultMonthlyRequestLimit: 0
        defaultRateLimit: ""
        name: name
      properties:
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: The maximum number of API requests allowed per month
          type: integer
        defaultRateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for the tier (requests per second
            or minute)
        overagePrice:
          description: The price per extra request beyond the monthly limit
          format: float
          type: number
    RateLimit:
      description: Rate limit configuration for this API key
      properties:
        name:
          description: The name of the rate limit
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: The number of allowed requests in the defined time window
          type: integer
        duration:
          description: "Time window for the rate limit, specified in ISO duration\
            \ format (e.g., '1h', '30m')"
          type: string
      type: object
    RateLimitInput:
      description: Rate limit configuration for this API key
      properties:
        name:
          description: The name of the rate limit
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: The number of allowed requests in the defined time window
          type: integer
        window:
          description: "Time window for the rate limit, specified in ISO duration\
            \ format (e.g., '1h', '30m')"
          type: string
      type: object
    KSUID:
      description: A K-sortable unique identifier (KSUID)
      maxLength: 27
      minLength: 27
      pattern: "^[A-Za-z0-9]{27}$"
      type: string
    HealthCheckSuccessResponse:
      example:
        status: healthy
      properties:
        status:
          example: healthy
          type: string
      type: object
    HealthCheckErrorResponse:
      example:
        status: unhealthy
      properties:
        status:
          example: unhealthy
          type: string
      type: object
    Service:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: ""
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the service
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
        createdAt:
          description: Timestamp when the service was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the service was last updated
          format: date-time
          type: string
      type: object
    ServiceInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
      required:
      - name
      type: object
    Actor:
      example:
        id: ""
        externalId: ""
        rateLimit: ""
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: Billing info for actor
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
      type: object
    ActorInput:
      example:
        externalId: ""
        rateLimit: ""
      properties:
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
      type: object
    ApiKey:
      example:
        createdAt: 2023-09-14T12:00:00.000Z
        id: ksu1example
        secret: newSecretKey123
        scopes:
        - read
        - write
        serviceId: serviceId123
        actorId: actorId456
        updatedAt: 2023-09-14T12:00:00.000Z
        name: Example API Key
        rateLimit:
          type: basic
          maxRequestsPerHour: 1000
        billingInfo:
          tier: pro
          trialExpiry: 2023-10-14T12:00:00.000Z
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        secret:
          description: The API key token
          maxLength: 180
          minLength: 1
          type: string
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for this API key
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        createdAt:
          description: Timestamp when the API key was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the API key was last updated
          format: date-time
          type: string
        name:
          description: Name of the API key
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration\
            \ date"
        expiry:
          description: Optional expiration date for the API key
          format: date-time
          type: string
      type: object
    ApiKeyInput:
      example:
        scopes:
        - scopes
        - scopes
      properties:
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/RateLimit'
          description: Rate limit configuration for this API key
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        name:
          description: Name of the API key
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration\
            \ date"
        expiry:
          description: Optional expiration date for the API key
          format: date-time
          type: string
      required:
      - actorId
      - name
      - serviceId
      type: object
    Error:
      example:
        error: error
      properties:
        error:
          description: Message describing the error that occurred
          type: string
      type: object
    _services__serviceId__key__keyId__auth_post_request:
      properties:
        secret:
          description: The API key provided by the client
          type: string
        actorExternalId:
          description: ""
          type: string
        roles:
          description: The API key provided by the client
          type: string
        scopes:
          description: The API key provided by the client
          type: string
      type: object
    _services__serviceId__key__keyId__auth_post_200_response:
      example:
        authorized: true
        scopes:
        - scopes
        - scopes
      properties:
        authorized:
          type: boolean
        scopes:
          items:
            type: string
          type: array
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |
        API Key authentication provides a straightforward method for clients to authenticate requests. This scheme expects an API key to be supplied in the headers of each request. Clients must include the API key in the 'X-API-KEY' header field.

        **How to use**:
        - Obtain an API key from the API provider.
        - Include the API key in the header of each request to the API as follows:
          ```
          X-API-KEY: {api_key}
          ```
        - The API validates the key against its database, and if the key is valid, allows access to the requested resources.

        **Advantages**:
        - Simple and easy to implement.
        - Suitable for accessing public APIs where security requirements are not excessively strict.

        **Limitations**:
        - Less secure than more complex authentication methods, such as tokens, as API keys can be easily exposed in transit or storage.
        - API keys do not expire by default and revoking them requires direct intervention.
      in: header
      name: X-API-KEY
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: |
        Bearer Token authentication uses JSON Web Tokens (JWT) to verify the identity of the requester. This scheme is included in the Authorization header of each HTTP request using the Bearer format.

        **How to use**:
        - Obtain a JWT from the authentication server. Typically, this involves an initial request with credentials (username/password) to receive the token.
        - Include the token in the Authorization header of your HTTP requests as follows:
          ```
          Authorization: Bearer {token}
          ```
        - The server decodes the JWT to verify its validity and authorizes the request based on the token's payload and signature.

        **Advantages**:
        - Offers more security than API key authentication as the token content is protected by cryptographic algorithms.
        - Tokens can be designed to expire after a certain period, enhancing security by limiting the duration of their validity.

        **Limitations**:
        - Requires a more complex backend setup to issue and verify tokens.
        - Handling token renewal and revocation can add overhead to client and server implementations.

        **Example**:
        To access protected routes or resources, the client must authenticate by providing the JWT in the authorization header:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiw
      scheme: bearer
      type: http
