// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/app/dal (interfaces: TestCaseManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	dal "github.com/payloadops/plato/app/dal"
)

// MockTestCaseManager is a mock of TestCaseManager interface.
type MockTestCaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseManagerMockRecorder
}

// MockTestCaseManagerMockRecorder is the mock recorder for MockTestCaseManager.
type MockTestCaseManagerMockRecorder struct {
	mock *MockTestCaseManager
}

// NewMockTestCaseManager creates a new mock instance.
func NewMockTestCaseManager(ctrl *gomock.Controller) *MockTestCaseManager {
	mock := &MockTestCaseManager{ctrl: ctrl}
	mock.recorder = &MockTestCaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseManager) EXPECT() *MockTestCaseManagerMockRecorder {
	return m.recorder
}

// CreateTestCase mocks base method.
func (m *MockTestCaseManager) CreateTestCase(arg0 context.Context, arg1, arg2 string, arg3 *dal.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTestCase indicates an expected call of CreateTestCase.
func (mr *MockTestCaseManagerMockRecorder) CreateTestCase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCase", reflect.TypeOf((*MockTestCaseManager)(nil).CreateTestCase), arg0, arg1, arg2, arg3)
}

// CreateTestCaseParameter mocks base method.
func (m *MockTestCaseManager) CreateTestCaseParameter(arg0 context.Context, arg1, arg2, arg3 string, arg4 *dal.TestCaseParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCaseParameter", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTestCaseParameter indicates an expected call of CreateTestCaseParameter.
func (mr *MockTestCaseManagerMockRecorder) CreateTestCaseParameter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCaseParameter", reflect.TypeOf((*MockTestCaseManager)(nil).CreateTestCaseParameter), arg0, arg1, arg2, arg3, arg4)
}

// DeleteTestCase mocks base method.
func (m *MockTestCaseManager) DeleteTestCase(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestCase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestCase indicates an expected call of DeleteTestCase.
func (mr *MockTestCaseManagerMockRecorder) DeleteTestCase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestCase", reflect.TypeOf((*MockTestCaseManager)(nil).DeleteTestCase), arg0, arg1, arg2, arg3)
}

// DeleteTestCaseParameter mocks base method.
func (m *MockTestCaseManager) DeleteTestCaseParameter(arg0 context.Context, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTestCaseParameter", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTestCaseParameter indicates an expected call of DeleteTestCaseParameter.
func (mr *MockTestCaseManagerMockRecorder) DeleteTestCaseParameter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTestCaseParameter", reflect.TypeOf((*MockTestCaseManager)(nil).DeleteTestCaseParameter), arg0, arg1, arg2, arg3, arg4)
}

// GetTestCase mocks base method.
func (m *MockTestCaseManager) GetTestCase(arg0 context.Context, arg1, arg2, arg3 string) (*dal.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dal.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCase indicates an expected call of GetTestCase.
func (mr *MockTestCaseManagerMockRecorder) GetTestCase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCase", reflect.TypeOf((*MockTestCaseManager)(nil).GetTestCase), arg0, arg1, arg2, arg3)
}

// GetTestCaseParameter mocks base method.
func (m *MockTestCaseManager) GetTestCaseParameter(arg0 context.Context, arg1, arg2, arg3, arg4 string) (*dal.TestCaseParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCaseParameter", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*dal.TestCaseParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCaseParameter indicates an expected call of GetTestCaseParameter.
func (mr *MockTestCaseManagerMockRecorder) GetTestCaseParameter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCaseParameter", reflect.TypeOf((*MockTestCaseManager)(nil).GetTestCaseParameter), arg0, arg1, arg2, arg3, arg4)
}

// ListTestCaseParameters mocks base method.
func (m *MockTestCaseManager) ListTestCaseParameters(arg0 context.Context, arg1, arg2, arg3 string) ([]dal.TestCaseParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCaseParameters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]dal.TestCaseParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCaseParameters indicates an expected call of ListTestCaseParameters.
func (mr *MockTestCaseManagerMockRecorder) ListTestCaseParameters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCaseParameters", reflect.TypeOf((*MockTestCaseManager)(nil).ListTestCaseParameters), arg0, arg1, arg2, arg3)
}

// ListTestCases mocks base method.
func (m *MockTestCaseManager) ListTestCases(arg0 context.Context, arg1, arg2 string) ([]dal.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCases", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dal.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCases indicates an expected call of ListTestCases.
func (mr *MockTestCaseManagerMockRecorder) ListTestCases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCases", reflect.TypeOf((*MockTestCaseManager)(nil).ListTestCases), arg0, arg1, arg2)
}

// UpdateTestCase mocks base method.
func (m *MockTestCaseManager) UpdateTestCase(arg0 context.Context, arg1, arg2 string, arg3 *dal.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestCase", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTestCase indicates an expected call of UpdateTestCase.
func (mr *MockTestCaseManagerMockRecorder) UpdateTestCase(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestCase", reflect.TypeOf((*MockTestCaseManager)(nil).UpdateTestCase), arg0, arg1, arg2, arg3)
}

// UpdateTestCaseParameter mocks base method.
func (m *MockTestCaseManager) UpdateTestCaseParameter(arg0 context.Context, arg1, arg2, arg3 string, arg4 *dal.TestCaseParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTestCaseParameter", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTestCaseParameter indicates an expected call of UpdateTestCaseParameter.
func (mr *MockTestCaseManagerMockRecorder) UpdateTestCaseParameter(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTestCaseParameter", reflect.TypeOf((*MockTestCaseManager)(nil).UpdateTestCaseParameter), arg0, arg1, arg2, arg3, arg4)
}
