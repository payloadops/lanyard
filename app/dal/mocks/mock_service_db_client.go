// Code generated by MockGen. DO NOT EDIT.
// Source: service_db_client.go
//
// Generated by this command:
//
//	mockgen -source=service_db_client.go -package=mocks -destination=mocks/mock_service_db_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/lanyard/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockServiceManager) CreateService(ctx context.Context, orgID string, service *dal.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", ctx, orgID, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceManagerMockRecorder) CreateService(ctx, orgID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceManager)(nil).CreateService), ctx, orgID, service)
}

// DeleteService mocks base method.
func (m *MockServiceManager) DeleteService(ctx context.Context, orgID, serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", ctx, orgID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockServiceManagerMockRecorder) DeleteService(ctx, orgID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceManager)(nil).DeleteService), ctx, orgID, serviceID)
}

// GetService mocks base method.
func (m *MockServiceManager) GetService(ctx context.Context, orgID, serviceID string) (*dal.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, orgID, serviceID)
	ret0, _ := ret[0].(*dal.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceManagerMockRecorder) GetService(ctx, orgID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceManager)(nil).GetService), ctx, orgID, serviceID)
}

// ListServicesByOrganization mocks base method.
func (m *MockServiceManager) ListServicesByOrganization(ctx context.Context, orgID string) ([]dal.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesByOrganization", ctx, orgID)
	ret0, _ := ret[0].([]dal.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesByOrganization indicates an expected call of ListServicesByOrganization.
func (mr *MockServiceManagerMockRecorder) ListServicesByOrganization(ctx, orgID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesByOrganization", reflect.TypeOf((*MockServiceManager)(nil).ListServicesByOrganization), ctx, orgID)
}

// UpdateService mocks base method.
func (m *MockServiceManager) UpdateService(ctx context.Context, orgID string, service *dal.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", ctx, orgID, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceManagerMockRecorder) UpdateService(ctx, orgID, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceManager)(nil).UpdateService), ctx, orgID, service)
}
