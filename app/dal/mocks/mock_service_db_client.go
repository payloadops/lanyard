// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/app/dal (interfaces: ServiceManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_service_db_client.go github.com/payloadops/plato/app/dal ServiceManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceManager is a mock of ServiceManager interface.
type MockServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockServiceManagerMockRecorder
}

// MockServiceManagerMockRecorder is the mock recorder for MockServiceManager.
type MockServiceManagerMockRecorder struct {
	mock *MockServiceManager
}

// NewMockServiceManager creates a new mock instance.
func NewMockServiceManager(ctrl *gomock.Controller) *MockServiceManager {
	mock := &MockServiceManager{ctrl: ctrl}
	mock.recorder = &MockServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceManager) EXPECT() *MockServiceManagerMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockServiceManager) CreateService(arg0 context.Context, arg1 string, arg2 *dal.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceManagerMockRecorder) CreateService(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceManager)(nil).CreateService), arg0, arg1, arg2)
}

// DeleteService mocks base method.
func (m *MockServiceManager) DeleteService(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockServiceManagerMockRecorder) DeleteService(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockServiceManager)(nil).DeleteService), arg0, arg1, arg2)
}

// GetService mocks base method.
func (m *MockServiceManager) GetService(arg0 context.Context, arg1, arg2 string) (*dal.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dal.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceManagerMockRecorder) GetService(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceManager)(nil).GetService), arg0, arg1, arg2)
}

// ListServicesByOrganization mocks base method.
func (m *MockServiceManager) ListServicesByOrganization(arg0 context.Context, arg1 string) ([]dal.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesByOrganization", arg0, arg1)
	ret0, _ := ret[0].([]dal.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesByOrganization indicates an expected call of ListServicesByOrganization.
func (mr *MockServiceManagerMockRecorder) ListServicesByOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesByOrganization", reflect.TypeOf((*MockServiceManager)(nil).ListServicesByOrganization), arg0, arg1)
}

// UpdateService mocks base method.
func (m *MockServiceManager) UpdateService(arg0 context.Context, arg1 string, arg2 *dal.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockServiceManagerMockRecorder) UpdateService(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockServiceManager)(nil).UpdateService), arg0, arg1, arg2)
}
