// Code generated by MockGen. DO NOT EDIT.
// Source: actor_db_client.go
//
// Generated by this command:
//
//	mockgen -source=actor_db_client.go -package=mocks -destination=mocks/mock_actor_db_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/lanyard/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockActorManager is a mock of ActorManager interface.
type MockActorManager struct {
	ctrl     *gomock.Controller
	recorder *MockActorManagerMockRecorder
}

// MockActorManagerMockRecorder is the mock recorder for MockActorManager.
type MockActorManagerMockRecorder struct {
	mock *MockActorManager
}

// NewMockActorManager creates a new mock instance.
func NewMockActorManager(ctrl *gomock.Controller) *MockActorManager {
	mock := &MockActorManager{ctrl: ctrl}
	mock.recorder = &MockActorManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorManager) EXPECT() *MockActorManagerMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorManager) CreateActor(ctx context.Context, orgID, serviceID string, actor *dal.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", ctx, orgID, serviceID, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorManagerMockRecorder) CreateActor(ctx, orgID, serviceID, actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorManager)(nil).CreateActor), ctx, orgID, serviceID, actor)
}

// DeleteActor mocks base method.
func (m *MockActorManager) DeleteActor(ctx context.Context, orgID, serviceID, externalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, orgID, serviceID, externalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorManagerMockRecorder) DeleteActor(ctx, orgID, serviceID, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorManager)(nil).DeleteActor), ctx, orgID, serviceID, externalID)
}

// GetActor mocks base method.
func (m *MockActorManager) GetActor(ctx context.Context, orgID, serviceID, externalID string) (*dal.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, orgID, serviceID, externalID)
	ret0, _ := ret[0].(*dal.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorManagerMockRecorder) GetActor(ctx, orgID, serviceID, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorManager)(nil).GetActor), ctx, orgID, serviceID, externalID)
}

// ListActors mocks base method.
func (m *MockActorManager) ListActors(ctx context.Context, orgID, serviceID string) ([]dal.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActors", ctx, orgID, serviceID)
	ret0, _ := ret[0].([]dal.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActors indicates an expected call of ListActors.
func (mr *MockActorManagerMockRecorder) ListActors(ctx, orgID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActors", reflect.TypeOf((*MockActorManager)(nil).ListActors), ctx, orgID, serviceID)
}

// UpdateActor mocks base method.
func (m *MockActorManager) UpdateActor(ctx context.Context, orgID, serviceID string, actor *dal.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, orgID, serviceID, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorManagerMockRecorder) UpdateActor(ctx, orgID, serviceID, actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorManager)(nil).UpdateActor), ctx, orgID, serviceID, actor)
}
