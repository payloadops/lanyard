// Code generated by MockGen. DO NOT EDIT.
// Source: tiers_db_client.go
//
// Generated by this command:
//
//	mockgen -source=tiers_db_client.go -package=mocks -destination=mocks/mock_tiers_db_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/lanyard/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockTierManager is a mock of TierManager interface.
type MockTierManager struct {
	ctrl     *gomock.Controller
	recorder *MockTierManagerMockRecorder
}

// MockTierManagerMockRecorder is the mock recorder for MockTierManager.
type MockTierManagerMockRecorder struct {
	mock *MockTierManager
}

// NewMockTierManager creates a new mock instance.
func NewMockTierManager(ctrl *gomock.Controller) *MockTierManager {
	mock := &MockTierManager{ctrl: ctrl}
	mock.recorder = &MockTierManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierManager) EXPECT() *MockTierManagerMockRecorder {
	return m.recorder
}

// CreateTier mocks base method.
func (m *MockTierManager) CreateTier(ctx context.Context, orgID, serviceID string, Tier *dal.Tier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTier", ctx, orgID, serviceID, Tier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTier indicates an expected call of CreateTier.
func (mr *MockTierManagerMockRecorder) CreateTier(ctx, orgID, serviceID, Tier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTier", reflect.TypeOf((*MockTierManager)(nil).CreateTier), ctx, orgID, serviceID, Tier)
}

// DeleteTier mocks base method.
func (m *MockTierManager) DeleteTier(ctx context.Context, orgID, serviceID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTier", ctx, orgID, serviceID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTier indicates an expected call of DeleteTier.
func (mr *MockTierManagerMockRecorder) DeleteTier(ctx, orgID, serviceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTier", reflect.TypeOf((*MockTierManager)(nil).DeleteTier), ctx, orgID, serviceID, name)
}

// GetTier mocks base method.
func (m *MockTierManager) GetTier(ctx context.Context, orgID, serviceID, name string) (*dal.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTier", ctx, orgID, serviceID, name)
	ret0, _ := ret[0].(*dal.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTier indicates an expected call of GetTier.
func (mr *MockTierManagerMockRecorder) GetTier(ctx, orgID, serviceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTier", reflect.TypeOf((*MockTierManager)(nil).GetTier), ctx, orgID, serviceID, name)
}

// ListTiers mocks base method.
func (m *MockTierManager) ListTiers(ctx context.Context, orgID, serviceID string) ([]dal.Tier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTiers", ctx, orgID, serviceID)
	ret0, _ := ret[0].([]dal.Tier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTiers indicates an expected call of ListTiers.
func (mr *MockTierManagerMockRecorder) ListTiers(ctx, orgID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTiers", reflect.TypeOf((*MockTierManager)(nil).ListTiers), ctx, orgID, serviceID)
}

// UpdateTier mocks base method.
func (m *MockTierManager) UpdateTier(ctx context.Context, orgID, serviceID string, Tier *dal.Tier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTier", ctx, orgID, serviceID, Tier)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTier indicates an expected call of UpdateTier.
func (mr *MockTierManagerMockRecorder) UpdateTier(ctx, orgID, serviceID, Tier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTier", reflect.TypeOf((*MockTierManager)(nil).UpdateTier), ctx, orgID, serviceID, Tier)
}
