// Code generated by MockGen. DO NOT EDIT.
// Source: org_db_client.go
//
// Generated by this command:
//
//	mockgen -source=org_db_client.go -package=mocks -destination=mocks/mock_org_db_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/lanyard/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockOrgManager is a mock of OrgManager interface.
type MockOrgManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrgManagerMockRecorder
}

// MockOrgManagerMockRecorder is the mock recorder for MockOrgManager.
type MockOrgManagerMockRecorder struct {
	mock *MockOrgManager
}

// NewMockOrgManager creates a new mock instance.
func NewMockOrgManager(ctrl *gomock.Controller) *MockOrgManager {
	mock := &MockOrgManager{ctrl: ctrl}
	mock.recorder = &MockOrgManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrgManager) EXPECT() *MockOrgManagerMockRecorder {
	return m.recorder
}

// CreateOrg mocks base method.
func (m *MockOrgManager) CreateOrg(ctx context.Context, orgID, serviceID string, Org *dal.Org) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", ctx, orgID, serviceID, Org)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockOrgManagerMockRecorder) CreateOrg(ctx, orgID, serviceID, Org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockOrgManager)(nil).CreateOrg), ctx, orgID, serviceID, Org)
}

// DeleteOrg mocks base method.
func (m *MockOrgManager) DeleteOrg(ctx context.Context, orgID, serviceID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrg", ctx, orgID, serviceID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrg indicates an expected call of DeleteOrg.
func (mr *MockOrgManagerMockRecorder) DeleteOrg(ctx, orgID, serviceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockOrgManager)(nil).DeleteOrg), ctx, orgID, serviceID, name)
}

// GetOrg mocks base method.
func (m *MockOrgManager) GetOrg(ctx context.Context, orgID, serviceID, name string) (*dal.Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", ctx, orgID, serviceID, name)
	ret0, _ := ret[0].(*dal.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockOrgManagerMockRecorder) GetOrg(ctx, orgID, serviceID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockOrgManager)(nil).GetOrg), ctx, orgID, serviceID, name)
}

// UpdateOrg mocks base method.
func (m *MockOrgManager) UpdateOrg(ctx context.Context, orgID, serviceID string, Org *dal.Org) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrg", ctx, orgID, serviceID, Org)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrg indicates an expected call of UpdateOrg.
func (mr *MockOrgManagerMockRecorder) UpdateOrg(ctx, orgID, serviceID, Org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrg", reflect.TypeOf((*MockOrgManager)(nil).UpdateOrg), ctx, orgID, serviceID, Org)
}
