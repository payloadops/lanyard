// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/api/dal (interfaces: TeamManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_team_db_client.go github.com/payloadops/plato/api/dal TeamManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/api/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockTeamManager is a mock of TeamManager interface.
type MockTeamManager struct {
	ctrl     *gomock.Controller
	recorder *MockTeamManagerMockRecorder
}

// MockTeamManagerMockRecorder is the mock recorder for MockTeamManager.
type MockTeamManagerMockRecorder struct {
	mock *MockTeamManager
}

// NewMockTeamManager creates a new mock instance.
func NewMockTeamManager(ctrl *gomock.Controller) *MockTeamManager {
	mock := &MockTeamManager{ctrl: ctrl}
	mock.recorder = &MockTeamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamManager) EXPECT() *MockTeamManagerMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockTeamManager) CreateTeam(arg0 context.Context, arg1 dal.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamManagerMockRecorder) CreateTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamManager)(nil).CreateTeam), arg0, arg1)
}

// DeleteTeam mocks base method.
func (m *MockTeamManager) DeleteTeam(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamManagerMockRecorder) DeleteTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamManager)(nil).DeleteTeam), arg0, arg1)
}

// GetTeam mocks base method.
func (m *MockTeamManager) GetTeam(arg0 context.Context, arg1 string) (*dal.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", arg0, arg1)
	ret0, _ := ret[0].(*dal.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamManagerMockRecorder) GetTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamManager)(nil).GetTeam), arg0, arg1)
}

// ListTeams mocks base method.
func (m *MockTeamManager) ListTeams(arg0 context.Context) ([]dal.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", arg0)
	ret0, _ := ret[0].([]dal.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockTeamManagerMockRecorder) ListTeams(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockTeamManager)(nil).ListTeams), arg0)
}

// ListTeamsByOrganization mocks base method.
func (m *MockTeamManager) ListTeamsByOrganization(arg0 context.Context, arg1 string) ([]dal.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeamsByOrganization", arg0, arg1)
	ret0, _ := ret[0].([]dal.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeamsByOrganization indicates an expected call of ListTeamsByOrganization.
func (mr *MockTeamManagerMockRecorder) ListTeamsByOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeamsByOrganization", reflect.TypeOf((*MockTeamManager)(nil).ListTeamsByOrganization), arg0, arg1)
}

// UpdateTeam mocks base method.
func (m *MockTeamManager) UpdateTeam(arg0 context.Context, arg1 dal.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamManagerMockRecorder) UpdateTeam(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeamManager)(nil).UpdateTeam), arg0, arg1)
}
