// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/app/dal (interfaces: PromptManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_prompt_db_client.go github.com/payloadops/plato/app/dal PromptManager
//

// Package mocks is a generated GoMock package.
package mocks

/*
import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockPromptManager is a mock of PromptManager interface.
type MockPromptManager struct {
	ctrl     *gomock.Controller
	recorder *MockPromptManagerMockRecorder
}

// MockPromptManagerMockRecorder is the mock recorder for MockPromptManager.
type MockPromptManagerMockRecorder struct {
	mock *MockPromptManager
}

// NewMockPromptManager creates a new mock instance.
func NewMockPromptManager(ctrl *gomock.Controller) *MockPromptManager {
	mock := &MockPromptManager{ctrl: ctrl}
	mock.recorder = &MockPromptManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptManager) EXPECT() *MockPromptManagerMockRecorder {
	return m.recorder
}

// CreatePrompt mocks base method.
func (m *MockPromptManager) CreatePrompt(arg0 context.Context, arg1 *dal.Prompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrompt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePrompt indicates an expected call of CreatePrompt.
func (mr *MockPromptManagerMockRecorder) CreatePrompt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrompt", reflect.TypeOf((*MockPromptManager)(nil).CreatePrompt), arg0, arg1)
}

// DeletePrompt mocks base method.
func (m *MockPromptManager) DeletePrompt(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrompt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePrompt indicates an expected call of DeletePrompt.
func (mr *MockPromptManagerMockRecorder) DeletePrompt(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrompt", reflect.TypeOf((*MockPromptManager)(nil).DeletePrompt), arg0, arg1, arg2, arg3)
}

// GetPrompt mocks base method.
func (m *MockPromptManager) GetPrompt(arg0 context.Context, arg1, arg2, arg3 string) (*dal.Prompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dal.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockPromptManagerMockRecorder) GetPrompt(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockPromptManager)(nil).GetPrompt), arg0, arg1, arg2, arg3)
}

// ListPromptsByProject mocks base method.
func (m *MockPromptManager) ListPromptsByProject(arg0 context.Context, arg1, arg2 string) ([]dal.Prompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptsByProject", arg0, arg1, arg2)
	ret0, _ := ret[0].([]dal.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPromptsByProject indicates an expected call of ListPromptsByProject.
func (mr *MockPromptManagerMockRecorder) ListPromptsByProject(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptsByProject", reflect.TypeOf((*MockPromptManager)(nil).ListPromptsByProject), arg0, arg1, arg2)
}

// UpdatePrompt mocks base method.
func (m *MockPromptManager) UpdatePrompt(arg0 context.Context, arg1 *dal.Prompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrompt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePrompt indicates an expected call of UpdatePrompt.
func (mr *MockPromptManagerMockRecorder) UpdatePrompt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrompt", reflect.TypeOf((*MockPromptManager)(nil).UpdatePrompt), arg0, arg1)
}
*/