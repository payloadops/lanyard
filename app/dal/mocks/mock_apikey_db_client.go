// Code generated by MockGen. DO NOT EDIT.
// Source: apikey_db_client.go
//
// Generated by this command:
//
//	mockgen -source=apikey_db_client.go -package=mocks -destination=mocks/mock_apikey_db_client.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/lanyard/app/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyManager is a mock of APIKeyManager interface.
type MockAPIKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyManagerMockRecorder
}

// MockAPIKeyManagerMockRecorder is the mock recorder for MockAPIKeyManager.
type MockAPIKeyManagerMockRecorder struct {
	mock *MockAPIKeyManager
}

// NewMockAPIKeyManager creates a new mock instance.
func NewMockAPIKeyManager(ctrl *gomock.Controller) *MockAPIKeyManager {
	mock := &MockAPIKeyManager{ctrl: ctrl}
	mock.recorder = &MockAPIKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyManager) EXPECT() *MockAPIKeyManagerMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockAPIKeyManager) CreateAPIKey(ctx context.Context, apiKey *dal.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockAPIKeyManagerMockRecorder) CreateAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockAPIKeyManager)(nil).CreateAPIKey), ctx, apiKey)
}

// DeleteAPIKey mocks base method.
func (m *MockAPIKeyManager) DeleteAPIKey(ctx context.Context, orgID, serviceID, apiKeyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, orgID, serviceID, apiKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockAPIKeyManagerMockRecorder) DeleteAPIKey(ctx, orgID, serviceID, apiKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockAPIKeyManager)(nil).DeleteAPIKey), ctx, orgID, serviceID, apiKeyID)
}

// GetAPIKey mocks base method.
func (m *MockAPIKeyManager) GetAPIKey(ctx context.Context, apiKeyID string) (*dal.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", ctx, apiKeyID)
	ret0, _ := ret[0].(*dal.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockAPIKeyManagerMockRecorder) GetAPIKey(ctx, apiKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockAPIKeyManager)(nil).GetAPIKey), ctx, apiKeyID)
}

// ListAPIKeysByService mocks base method.
func (m *MockAPIKeyManager) ListAPIKeysByService(ctx context.Context, orgID, serviceID string) ([]dal.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeysByService", ctx, orgID, serviceID)
	ret0, _ := ret[0].([]dal.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeysByService indicates an expected call of ListAPIKeysByService.
func (mr *MockAPIKeyManagerMockRecorder) ListAPIKeysByService(ctx, orgID, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeysByService", reflect.TypeOf((*MockAPIKeyManager)(nil).ListAPIKeysByService), ctx, orgID, serviceID)
}

// UpdateAPIKey mocks base method.
func (m *MockAPIKeyManager) UpdateAPIKey(ctx context.Context, apiKey *dal.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKey", ctx, apiKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKey indicates an expected call of UpdateAPIKey.
func (mr *MockAPIKeyManagerMockRecorder) UpdateAPIKey(ctx, apiKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKey", reflect.TypeOf((*MockAPIKeyManager)(nil).UpdateAPIKey), ctx, apiKey)
}
