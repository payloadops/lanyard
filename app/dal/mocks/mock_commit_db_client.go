// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/api/dal (interfaces: CommitManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_commit_db_client.go github.com/payloadops/plato/api/dal CommitManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/api/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitManager is a mock of CommitManager interface.
type MockCommitManager struct {
	ctrl     *gomock.Controller
	recorder *MockCommitManagerMockRecorder
}

// MockCommitManagerMockRecorder is the mock recorder for MockCommitManager.
type MockCommitManagerMockRecorder struct {
	mock *MockCommitManager
}

// NewMockCommitManager creates a new mock instance.
func NewMockCommitManager(ctrl *gomock.Controller) *MockCommitManager {
	mock := &MockCommitManager{ctrl: ctrl}
	mock.recorder = &MockCommitManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitManager) EXPECT() *MockCommitManagerMockRecorder {
	return m.recorder
}

// CreateCommit mocks base method.
func (m *MockCommitManager) CreateCommit(arg0 context.Context, arg1 dal.Commit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockCommitManagerMockRecorder) CreateCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockCommitManager)(nil).CreateCommit), arg0, arg1)
}

// GetCommit mocks base method.
func (m *MockCommitManager) GetCommit(arg0 context.Context, arg1 string) (*dal.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1)
	ret0, _ := ret[0].(*dal.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockCommitManagerMockRecorder) GetCommit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockCommitManager)(nil).GetCommit), arg0, arg1)
}

// ListCommits mocks base method.
func (m *MockCommitManager) ListCommits(arg0 context.Context) ([]dal.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0)
	ret0, _ := ret[0].([]dal.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockCommitManagerMockRecorder) ListCommits(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockCommitManager)(nil).ListCommits), arg0)
}

// ListCommitsByBranch mocks base method.
func (m *MockCommitManager) ListCommitsByBranch(arg0 context.Context, arg1 string) ([]dal.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommitsByBranch", arg0, arg1)
	ret0, _ := ret[0].([]dal.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommitsByBranch indicates an expected call of ListCommitsByBranch.
func (mr *MockCommitManagerMockRecorder) ListCommitsByBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommitsByBranch", reflect.TypeOf((*MockCommitManager)(nil).ListCommitsByBranch), arg0, arg1)
}
