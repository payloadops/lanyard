// Code generated by MockGen. DO NOT EDIT.
// Source: plato/app/pkg/service/apikey (interfaces: ApiKeyService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_apikey.go plato/app/pkg/service/apikey ApiKeyService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dbdal "plato/app/pkg/dal/postgres"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApiKeyService is a mock of ApiKeyService interface.
type MockApiKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyServiceMockRecorder
}

// MockApiKeyServiceMockRecorder is the mock recorder for MockApiKeyService.
type MockApiKeyServiceMockRecorder struct {
	mock *MockApiKeyService
}

// NewMockApiKeyService creates a new mock instance.
func NewMockApiKeyService(ctrl *gomock.Controller) *MockApiKeyService {
	mock := &MockApiKeyService{ctrl: ctrl}
	mock.recorder = &MockApiKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiKeyService) EXPECT() *MockApiKeyServiceMockRecorder {
	return m.recorder
}

// DeleteApiKey mocks base method.
func (m *MockApiKeyService) DeleteApiKey(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApiKey indicates an expected call of DeleteApiKey.
func (mr *MockApiKeyServiceMockRecorder) DeleteApiKey(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockApiKeyService)(nil).DeleteApiKey), arg0, arg1, arg2)
}

// GetApiKey mocks base method.
func (m *MockApiKeyService) GetApiKey(arg0 context.Context, arg1 string) (*dbdal.ApiKeyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKey", arg0, arg1)
	ret0, _ := ret[0].(*dbdal.ApiKeyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockApiKeyServiceMockRecorder) GetApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockApiKeyService)(nil).GetApiKey), arg0, arg1)
}

// ListApiKeys mocks base method.
func (m *MockApiKeyService) ListApiKeys(arg0 context.Context, arg1 string) (*[]dbdal.ApiKeyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiKeys", arg0, arg1)
	ret0, _ := ret[0].(*[]dbdal.ApiKeyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApiKeys indicates an expected call of ListApiKeys.
func (mr *MockApiKeyServiceMockRecorder) ListApiKeys(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiKeys", reflect.TypeOf((*MockApiKeyService)(nil).ListApiKeys), arg0, arg1)
}

// Mint mocks base method.
func (m *MockApiKeyService) Mint(arg0 context.Context, arg1, arg2 string, arg3 []string) (*dbdal.ApiKeyItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*dbdal.ApiKeyItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mint indicates an expected call of Mint.
func (mr *MockApiKeyServiceMockRecorder) Mint(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockApiKeyService)(nil).Mint), arg0, arg1, arg2, arg3)
}

// UpdateApiKey mocks base method.
func (m *MockApiKeyService) UpdateApiKey(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiKey", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApiKey indicates an expected call of UpdateApiKey.
func (mr *MockApiKeyServiceMockRecorder) UpdateApiKey(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKey", reflect.TypeOf((*MockApiKeyService)(nil).UpdateApiKey), arg0, arg1, arg2, arg3, arg4)
}
