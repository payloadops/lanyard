// Code generated by MockGen. DO NOT EDIT.
// Source: plato/app/pkg/service/health (interfaces: HealthService)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_health.go plato/app/pkg/service/health HealthService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	health "plato/app/pkg/service/health"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHealthService is a mock of HealthService interface.
type MockHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceMockRecorder
}

// MockHealthServiceMockRecorder is the mock recorder for MockHealthService.
type MockHealthServiceMockRecorder struct {
	mock *MockHealthService
}

// NewMockHealthService creates a new mock instance.
func NewMockHealthService(ctrl *gomock.Controller) *MockHealthService {
	mock := &MockHealthService{ctrl: ctrl}
	mock.recorder = &MockHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthService) EXPECT() *MockHealthServiceMockRecorder {
	return m.recorder
}

// CheckHealth mocks base method.
func (m *MockHealthService) CheckHealth() health.CheckHealthResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth")
	ret0, _ := ret[0].(health.CheckHealthResponse)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockHealthServiceMockRecorder) CheckHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockHealthService)(nil).CheckHealth))
}
