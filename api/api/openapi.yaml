openapi: 3.0.0
info:
  contact:
    email: info@payloadops.com
    name: Payload Ops Team
  description: "The Payload Ops API streamlines management of AI prompts, projects,\
    \ organizations, teams, and users through conventional HTTP requests. This platform\
    \ enables efficient automation and control of resources, providing robust tools\
    \ for developers to manage settings, memberships, and activities seamlessly."
  title: Payload Ops API
  version: "1.0"
servers:
- description: Production server (uses live data)
  url: https://api.payloadops.com/v1
- description: Sandbox server (uses test data)
  url: https://sandbox-api.payloadops.com/v1
security:
- ApiKeyAuth: []
- BearerAuth: []
paths:
  /health:
    get:
      description: |
        This endpoint performs a health check of the API, quickly assessing and returning the operational status. It is designed to monitor critical system metrics and infrastructure components, such as database connections and system uptime, ensuring that the API is functioning properly. This endpoint is vital for operational monitoring, particularly in production environments where reliability is crucial.

        **Key Features**:
        - **Immediate Health Status**: Quickly assesses the overall health of the API by checking essential components and dependencies, such as database connectivity and server uptime.
        - **Operational Monitoring**: Used by monitoring systems, load balancers, and during deployment processes to ensure that the API is operational and performing as expected.

        **Use Cases**:
        - **Continuous Monitoring**: Automatically monitored by systems operations teams to detect and respond to issues promptly.
        - **Deployment Verification**: Checked post-deployment to confirm that the API is fully operational in its deployed environment.

        **Response Details**:
        - A successful response indicates that all checked components are operational.
        - An unsuccessful response identifies which components are experiencing issues, aiding in quick diagnostics and resolution.
      operationId: healthCheck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheck_200_response'
          description: "API is healthy and fully operational, with all necessary components\
            \ (like databases) connected and functioning."
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheck_500_response'
          description: "API is experiencing issues, indicating that one or more components\
            \ are not functioning correctly."
      summary: Health Check Endpoint
      tags:
      - Health Check
  /organizations:
    get:
      description: |
        Retrieves a comprehensive list of all organizations registered in the system. This operation is essential for stakeholders, administrators, or system integrators who need to manage or interact with multiple organizations. It provides a broad overview of each organization, including essential details like organization ID, name, and contact information.

        **Key Features**:
        - **Broad Overview**: Offers a snapshot of all organizations, facilitating management decisions and oversight.
        - **Strategic Planning**: Supports strategic analysis and planning by providing access to a list of potential partners, clients, or entities within the system.

        **Use Cases**:
        - System administrators conducting audits or reviews of organizational entities.
        - Third-party service providers integrating or offering services across multiple organizations.
      operationId: listOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: "Successfully retrieved a list of all organizations, each presented\
            \ with key details for easy reference."
        "500":
          description: "A server error occurred, preventing the listing of organizations."
      security:
      - BearerAuth: []
      summary: List all organizations
      tags:
      - Organizations
    post:
      description: |
        Creates a new organization based on the provided details. This endpoint allows users to add new organizational entities to the system, facilitating the expansion and diversification of business operations. It is crucial for dynamically growing environments where new organizations are frequently established.

        **Key Features**:
        - **Organization Creation**: Enables the setup of new organizational profiles, including specifying their structure, purpose, and operational details.
        - **Customizable Setup**: Allows for detailed customization of organization parameters such as name, contact information, and operational settings.

        **Use Cases**:
        - Business administrators setting up new entities as part of corporate expansion or restructuring.
        - Start-ups and new businesses registering their organization within industry platforms or networks.
      operationId: createOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
        description: "Contains all necessary attributes for creating a new organization,\
          \ such as the organization's name, description, and contact details."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: "The organization was created successfully, with detailed information\
            \ about the new entity included in the response."
        "400":
          description: "Invalid input, typically due to missing required fields, non-conformity\
            \ to expected formats, or improper data values."
        "500":
          description: "A server error occurred, preventing the creation of the organization."
      security:
      - BearerAuth: []
      summary: Create a new organization
      tags:
      - Organizations
  /organizations/{orgId}:
    delete:
      description: |
        Permanently deletes an organization from the system, including all related data. This operation is critical for managing organizational lifecycle, especially when an organization ceases operations or merges with another entity.

        **Key Features**:
        - **Complete Removal**: Ensures that all information pertaining to the organization is thoroughly removed from the system.
        - **Compliance and Security**: Aids in compliance with legal and regulatory requirements by allowing for the secure deletion of sensitive data.

        **Use Cases**:
        - Removing organizational records to comply with data retention policies.
        - Deleting entities that are no longer active to maintain system hygiene and security.
      operationId: deleteOrganization
      parameters:
      - description: The unique identifier of the organization to be deleted.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Organization deleted successfully, with no remaining data\
            \ stored."
        "404":
          description: No organization found with the specified ID.
        "500":
          description: "A server error occurred, preventing the deletion of the organization."
      security:
      - BearerAuth: []
      summary: Delete a specific organization
      tags:
      - Organizations
    get:
      description: |
        Retrieves detailed information about an organization identified by its unique ID. This operation is crucial for stakeholders and administrators who need to understand the structure, operational scope, and strategic data of the organization. It provides essential insights into the organizationâ€™s profile, operational units, and management hierarchies.

        **Key Features**:
        - **Comprehensive Overview**: Delivers a full profile of the organization, including its mission, operational scope, and key contacts.
        - **Strategic Insight**: Facilitates strategic planning and decision-making by providing essential organizational data.

        **Use Cases**:
        - Executives and managers reviewing organizational details for reporting or strategic planning.
        - External partners or regulatory bodies verifying organizational information for compliance or collaboration purposes.
      operationId: getOrganization
      parameters:
      - description: The unique identifier of the organization to retrieve.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Successfully retrieved detailed information about the organization.
        "404":
          description: No organization found with the specified ID.
        "500":
          description: "A server error occurred, preventing the retrieval of the organization."
      security:
      - BearerAuth: []
      summary: Get a specific organization
      tags:
      - Organizations
    put:
      description: |
        Updates the detailed information of an organization based on the provided input. This endpoint allows for modifications to the organization's name, contact details, and structural data, ensuring that organizational records remain current and accurate.

        **Key Features**:
        - **Dynamic Update Capabilities**: Supports updates to various aspects of the organization's profile, helping to keep data relevant and up-to-date.
        - **Adaptive Changes**: Facilitates organizational changes such as rebranding, leadership shifts, or operational adjustments.

        **Use Cases**:
        - Administrators updating organizational information following structural changes or policy updates.
        - Compliance officers ensuring that organizational data meets regulatory standards.
      operationId: updateOrganization
      parameters:
      - description: The unique identifier of the organization to update.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationInput'
        description: Contains the updated information for the organization.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Organization information updated successfully.
        "400":
          description: "Invalid input, such as missing required fields or unsupported\
            \ format."
        "404":
          description: No organization found with the specified ID.
        "500":
          description: "A server error occurred, preventing the update of the organization."
      security:
      - BearerAuth: []
      summary: Update a specific organization
      tags:
      - Organizations
  /organizations/{orgId}/teams:
    get:
      description: |
        Retrieves a comprehensive list of all teams within a specified organization. This endpoint is essential for administrators and organizational leaders to view and manage team structures, understand team compositions, and plan resource allocation effectively.

        **Key Features**:
        - **Comprehensive Overview**: Provides detailed views of all teams, including their names, descriptions, and member counts.
        - **Management and Planning**: Supports strategic planning and management by offering insights into team distributions and roles within the organization.

        **Use Cases**:
        - Executives and managers reviewing team structures for strategic planning.
        - HR departments managing resource allocations and internal audits of team distributions.
      operationId: listTeams
      parameters:
      - description: The identifier of the organization whose teams are being listed.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Team'
                type: array
          description: "Successfully retrieved a list of all teams within the organization,\
            \ each entry containing details such as team ID, name, and member list."
        "500":
          description: "A server error occurred, preventing the retrieval of team\
            \ information."
      security:
      - BearerAuth: []
      summary: List all teams in an organization
      tags:
      - Teams
    post:
      description: |
        Creates a new team within an organization based on the provided details such as team name, description, and intended members. This operation facilitates the expansion and structuring of an organization's teams to meet evolving business needs and project demands.

        **Key Features**:
        - **Team Formation**: Enables the formation of new teams tailored to specific projects or organizational functions.
        - **Customizable Setup**: Allows for detailed definition of team characteristics including leadership roles and member responsibilities.

        **Use Cases**:
        - Forming new project teams as part of business expansion or new project initiation.
        - Restructuring existing departments to enhance efficiency or focus on new strategic areas.
      operationId: createTeam
      parameters:
      - description: The identifier of the organization where the new team will be
          created.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamInput'
        description: "Contains the necessary attributes for creating a new team, including\
          \ name, description, and initial members if applicable."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: "The team was created successfully and is now part of the organization,\
            \ with detailed information about the new team provided."
        "400":
          description: "Invalid input, typically due to missing required fields or\
            \ improperly formatted data."
        "500":
          description: "A server error occurred, preventing the creation of the new\
            \ team."
      security:
      - BearerAuth: []
      summary: Create a new team for an organization
      tags:
      - Teams
  /organizations/{orgId}/teams/{teamId}:
    delete:
      description: |
        Deletes a specific team from an organization based on its team ID. This operation is critical for managing organizational structure, particularly when a team is dissolved or merged with another.

        **Key Features**:
        - **Streamlined Organizational Structure**: Helps maintain a clean and efficient organizational hierarchy by removing outdated or unnecessary teams.
        - **Security and Compliance**: Ensures that all related data is securely handled and removed in compliance with data protection policies.

        **Use Cases**:
        - Removing teams that are no longer active or have been restructured.
        - Ensuring that team data does not persist in the system unnecessarily, particularly in sensitive environments.
      operationId: deleteTeam
      parameters:
      - description: The identifier of the organization from which the team will be
          deleted.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the team to be deleted.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Team deleted successfully, with no remaining data stored."
        "404":
          description: Either the specified team or the organization was not found.
        "500":
          description: "A server error occurred, preventing the deletion of the team."
      security:
      - BearerAuth: []
      summary: Delete a specific team
      tags:
      - Teams
    get:
      description: |
        Retrieves detailed information about a specific team within an organization, using its unique team ID. This operation is crucial for administrators who need to manage team settings, understand team composition, and review team-specific roles and permissions.

        **Key Features**:
        - **Comprehensive Team Details**: Provides complete information about the team, including its members, roles, projects, and operational statistics.
        - **Management and Oversight**: Essential for overseeing team configurations and ensuring that team setups align with organizational policies and goals.

        **Use Cases**:
        - Team leaders reviewing team composition and roles for project assignments.
        - HR and management accessing team details for planning and resource allocation.
      operationId: getTeam
      parameters:
      - description: The identifier of the organization to which the team belongs.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the team to retrieve.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Successfully retrieved detailed information about the team.
        "404":
          description: The specified team or organization was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of the team."
      security:
      - BearerAuth: []
      summary: Get a specific team by ID
      tags:
      - Teams
    put:
      description: |
        Updates the details of a specific team within an organization. This endpoint allows for the modification of team data such as name, description, and member roles. It supports dynamic team management and ensures that team information remains current and relevant to organizational needs.

        **Key Features**:
        - **Dynamic Team Management**: Enables changes to team structure, roles, and project assignments.
        - **Adaptable to Changing Needs**: Facilitates quick updates to team details in response to project shifts or strategic realignments.

        **Use Cases**:
        - Administrators adjusting team roles and permissions to reflect new project requirements.
        - Team leaders modifying team descriptions or details to better define the teamâ€™s purpose or objectives.
      operationId: updateTeam
      parameters:
      - description: The identifier of the organization where the team is registered.
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the team to be updated.
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamInput'
        description: Contains the updated information for the team.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: "Team information updated successfully, reflecting new settings\
            \ and configurations."
        "400":
          description: "Invalid input, such as missing required data or unsupported\
            \ modifications."
        "404":
          description: Either the specified team or the organization was not found.
        "500":
          description: "A server error occurred, preventing the update of the team."
      security:
      - BearerAuth: []
      summary: Update a specific team
      tags:
      - Teams
  /users:
    get:
      description: |
        Retrieves a comprehensive list of all users registered in the system. This operation is essential for administrators and systems that need to manage user access, monitor user activity, or gather user data for reporting purposes.

        **Key Features**:
        - **Broad Overview**: Provides a detailed view of all user profiles, including their roles, status, and basic information.
        - **User Management Support**: Facilitates the administration and oversight of user accounts, supporting tasks such as auditing, role assignment, and access reviews.

        **Use Cases**:
        - System administrators needing to monitor user activities or manage user permissions.
        - Automated systems that integrate user data for analytics or marketing purposes.
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: "Successfully retrieved a list of user profiles, each including\
            \ essential details such as names, email addresses, and roles."
        "500":
          description: "A server error occurred, preventing the listing of users."
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Users
    post:
      description: |
        Creates a new user with specified details such as name, email, and role. This endpoint is crucial for adding new users to the system, facilitating controlled access to applications and services based on predefined roles and permissions.

        **Key Features**:
        - **Flexible User Creation**: Allows for the dynamic creation of user accounts with configurable roles and permissions.
        - **Security and Compliance**: Adheres to security best practices by ensuring that all new users are created with appropriate access levels and data validation.

        **Use Cases**:
        - Onboarding new employees by creating user accounts as part of organizational access provisioning.
        - Registering new customers or clients on platforms requiring user authentication and personalization.

        **Requirements**:
        - Input data must include essential user details such as name, email, and a predefined role. Additional data such as department or group might also be required based on system configuration.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        description: "Contains the necessary attributes for creating a new user, including\
          \ name, email, role, and any additional relevant information."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: "User created successfully, with the user's profile details\
            \ returned including identifiers and status."
        "400":
          description: "Invalid input, typically due to missing required fields, non-conformity\
            \ to data formats, or invalid values."
        "500":
          description: "A server error occurred, preventing the creation of a new\
            \ user."
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /users/{userId}:
    delete:
      description: |
        Permanently deletes a user from the system based on their unique ID. This operation is crucial for managing user lifecycle, particularly in cases where users need to be removed due to security concerns or upon user request.

        **Key Features**:
        - **Secure User Management**: Ensures that user data can be permanently removed in compliance with data protection regulations.
        - **Lifecycle Management**: Supports the management of user accounts by facilitating the complete removal of user profiles when necessary.

        **Use Cases**:
        - Administrators needing to remove user access permanently, either at the user's request or due to policy requirements.
        - Managing user deactivation and data deletion in compliance with privacy laws and regulations.
      operationId: deleteUser
      parameters:
      - description: The unique identifier of the user to be deleted.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "User deleted successfully, no content returned."
        "404":
          description: No user found with the specified ID.
        "500":
          description: "A server error occurred, preventing the deletion of the user."
      security:
      - BearerAuth: []
      summary: Delete a specific user
      tags:
      - Users
    get:
      description: |
        Retrieves detailed information about a user, identified by their unique ID. This operation is essential for system administrators and applications requiring user data validation, profile management, or access rights verification.

        **Key Features**:
        - **Detailed User Profiles**: Provides comprehensive details about the user, including contact information, roles, and permissions.
        - **Security and Compliance**: Supports security processes by enabling identity verification and user management.

        **Use Cases**:
        - Administrators managing user access and permissions within a system.
        - Services integrating user information for personalization or configuration.
      operationId: getUser
      parameters:
      - description: The unique identifier of the user to retrieve.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successfully retrieved detailed information about the user.
        "404":
          description: No user found with the specified ID.
        "500":
          description: "A server error occurred, preventing the retrieval of user\
            \ information."
      security:
      - BearerAuth: []
      summary: Get a specific user by ID
      tags:
      - Users
    put:
      description: |
        Updates the profile or settings of a user identified by their unique ID. This endpoint allows for the modification of user details such as names, contact information, or roles, supporting ongoing management of user data.

        **Key Features**:
        - **Profile Updates**: Enables changes to user profiles, supporting dynamic updates to contact details, preferences, and roles.
        - **Access Control Adjustments**: Facilitates updates to user permissions and access controls, essential for maintaining security and operational integrity.

        **Use Cases**:
        - Administrators updating user roles or permissions in response to organizational changes.
        - Users updating their own profiles as part of regular account maintenance.
      operationId: updateUser
      parameters:
      - description: The unique identifier of the user to update.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        description: Contains the updated data for the user's profile.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User information updated successfully.
        "400":
          description: "Invalid input, such as malformed data or incomplete required\
            \ fields."
        "404":
          description: No user found with the specified ID.
        "500":
          description: "A server error occurred, preventing the update of the user."
      security:
      - BearerAuth: []
      summary: Update a specific user
      tags:
      - Users
  /projects:
    get:
      description: |
        Retrieves a comprehensive list of all projects within the system. This operation is crucial for users needing an overview of all existing projects, including their basic metadata and status. It allows for effective management and navigation across different projects, particularly useful in environments with multiple ongoing initiatives.

        **Key Features**:
        - **Broad Overview**: Provides a snapshot of all projects, facilitating quick access and management decisions.
        - **Ease of Navigation**: Helps users identify and access specific projects quickly, enhancing workflow efficiency.

        **Use Cases**:
        - Administrators monitoring the overall progress and status of all projects.
        - Team members seeking to quickly find and access specific projects they are working on or interested in.
      operationId: listProjects
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: "Successfully retrieved a list of all projects, each represented\
            \ with basic details like project ID, name, and description."
        "500":
          description: "A server error occurred, preventing the listing of projects."
      summary: List all projects
      tags:
      - Projects
    post:
      description: |
        Creates a new project based on the provided details in the request. This endpoint facilitates the addition of new projects into the system, allowing for the initiation of new initiatives or work streams within the organization.

        **Key Features**:
        - **Project Initialization**: Enables the setup of new projects, defining their scope, objectives, and other necessary details from the outset.
        - **Configurable Details**: Allows for detailed customization of project parameters such as name, description, and specific settings related to project management.

        **Use Cases**:
        - Starting new initiatives or phases in business operations.
        - Expanding the organization's portfolio by adding projects that address new challenges or market opportunities.
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
        description: "Contains the necessary information for creating a new project,\
          \ such as the project name, description, and other relevant settings."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "The project was created successfully, with details of the\
            \ new project provided in the response."
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_400_response'
          description: "Bad request due to invalid input, such as incomplete data\
            \ fields or improper values."
      summary: Create a new project
      tags:
      - Projects
  /projects/{projectId}:
    delete:
      description: |
        Deletes a specific project using its unique ID, removing all data and settings associated with it. This operation is typically used when a project has been completed, or if it needs to be removed for organizational reasons.

        **Key Features**:
        - **Complete Removal**: Ensures that all project-related data is permanently deleted.
        - **Security Compliance**: Helps maintain data hygiene and compliance by allowing for the disposal of unnecessary or outdated projects.

        **Use Cases**:
        - Removing projects that are no longer active or required.
        - Cleaning up workspace and resources as part of project lifecycle management.
      operationId: deleteProject
      parameters:
      - description: The unique identifier of the project to be deleted.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "Project deleted successfully, with no remaining data stored."
        "404":
          description: No project found with the specified ID to delete.
        "500":
          description: "A server error occurred, preventing the dele"
      summary: Delete a project
      tags:
      - Projects
    get:
      description: |
        Retrieves detailed information about a specific project using its unique identifier. This operation is crucial for users who need to view the overall structure, settings, and details of the project, including its metadata, associated prompts, and configuration settings.

        **Key Features**:
        - **Comprehensive Details**: Provides all relevant information about the project, including descriptions, member roles, and other metadata.
        - **Project Oversight**: Essential for project managers and team members to understand current project settings and status.

        **Use Cases**:
        - Project managers reviewing project settings and progress.
        - Team members accessing project details for integration with other tasks or for reporting purposes.
      operationId: getProject
      parameters:
      - description: The unique identifier of the project to retrieve.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Detailed information about the project retrieved successfully.
        "404":
          description: No project found with the specified ID.
        "500":
          description: "A server error occurred, preventing the retrieval of the project."
      summary: Retrieve a project by ID
      tags:
      - Projects
    put:
      description: |
        Updates the specified project's details based on the provided input. This operation allows for modifications to project metadata such as the project name, description, and other configurable settings. It is vital for maintaining up-to-date information and adapting project settings to evolving requirements.

        **Key Features**:
        - **Flexible Modification**: Supports changes to most project attributes, facilitating dynamic project management.
        - **Adaptive Configuration**: Enables projects to be adapted as team goals or business needs change.

        **Use Cases**:
        - Updating project details to reflect new directions or goals.
        - Modifying access controls or roles as team dynamics change.
      operationId: updateProject
      parameters:
      - description: The unique identifier of the project to be updated.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
        description: "Contains the new details for the project, which may include\
          \ the name, description, and other relevant settings."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: "Project updated successfully, reflecting new settings and\
            \ configurations."
        "400":
          description: Bad request due to invalid input or missing required fields.
        "404":
          description: No project found with the specified ID to update.
        "500":
          description: "A server error occurred, preventing the update of the project."
      summary: Update a project
      tags:
      - Projects
  /projects/{projectId}/keys:
    get:
      description: |
        Retrieves a list of all API keys associated with a specific project. This endpoint is essential for managing and reviewing the access provided to different services and users. It offers a comprehensive view of all keys, their scopes, and their statuses, which is critical for effective access management and security audits.

        **Features**:
        - **Comprehensive Overview**: Provides a complete listing of all API keys, facilitating audits and security reviews.
        - **Access Transparency**: Ensures that administrators can view and monitor the scopes and usage of each API key, aiding in proactive security practices.

        **Use Cases**:
        - Auditing API keys to ensure that they are up-to-date and have appropriate permissions.
        - Quickly identifying and managing keys that may need adjustments or revocation.
      operationId: listApiKeys
      parameters:
      - description: The unique identifier of the project whose API keys are to be
          listed.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successfully retrieved a list of API keys for the project.
        "404":
          description: "The specified project was not found, indicating an invalid\
            \ project ID."
        "500":
          description: "A server error occurred, preventing the retrieval of API keys."
      summary: List all API keys for a project
      tags:
      - API Keys
    post:
      description: |
        Generates a new API key for a specific project with designated scopes. This operation is crucial for creating secure, scoped access to the project's resources. It allows administrators to define specific permissions, ensuring that API keys can only access appropriate endpoints as per their operational requirements.

        **Features**:
        - **Scoped Access**: Tailors access permissions to specific needs, enhancing security by limiting API key capabilities to necessary actions.
        - **Secure Management**: Generates keys in a secure manner, ensuring that they are only known to the requester and stored securely.

        **Use Cases**:
        - Provisioning a new service or system that requires access to the project.
        - Creating temporary access for automation scripts or third-party integrations.

        **Guidelines**:
        - Ensure to specify the necessary scopes in the request body to avoid overly permissive access.
        - Manage the lifecycle of API keys responsibly, revoking them when no longer needed.
      operationId: generateApiKey
      parameters:
      - description: The identifier of the project for which the API key is being
          generated.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: Contains the scope definitions for the new API key.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: New API key generated successfully. The key details are included
            in the response.
        "400":
          description: "Invalid request, such as missing required fields or invalid\
            \ scope specifications."
        "404":
          description: The specified project was not found.
        "500":
          description: "A server error occurred, preventing the generation of the\
            \ API key."
      summary: Generate a new API key with specific scopes for a project
      tags:
      - API Keys
  /projects/{projectId}/keys/{keyId}:
    delete:
      description: |
        Deletes a specific API key from a project, permanently removing its access to the project resources. This operation is essential for maintaining security when an API key is no longer needed or if its permissions need to be revoked urgently.

        **Key Features**:
        - **Secure Cleanup**: Ensures that unused or compromised API keys are removed to prevent unauthorized access.
        - **Access Revocation**: Provides a method to immediately invalidate an API key when necessary.

        **Use Cases**:
        - Removing access for team members who no longer require it, such as after project completion or role changes.
        - Revoking keys that may have been exposed or compromised to maintain security integrity.
      operationId: deleteApiKey
      parameters:
      - description: The unique identifier of the project from which the API key will
          be deleted.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The API key was deleted successfully, no content returned."
        "404":
          description: Either the API key or the project was not found.
        "500":
          description: "A server error occurred, preventing the deletion of the API\
            \ key."
      summary: Delete a specific API key
      tags:
      - API Keys
    get:
      description: |
        Retrieves detailed information about a specific API key associated with a project. This operation is crucial for managing access to project resources, allowing administrators to review the permissions and details of individual API keys.

        **Key Features**:
        - **Security Management**: Provides the ability to monitor and manage API access through detailed key information.
        - **Access Review**: Enables project managers to verify the scope and validity of an API key, ensuring that it aligns with current security policies.

        **Use Cases**:
        - Administrators auditing access permissions for compliance and security best practices.
        - Developers checking API key details to troubleshoot access issues or to ensure proper configuration.
      operationId: getApiKey
      parameters:
      - description: The unique identifier of the project associated with the API
          key.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to retrieve.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Detailed information about the API key retrieved successfully.
        "404":
          description: Either the specified API key or the project was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of the API\
            \ key."
      summary: Retrieve a specific API key
      tags:
      - API Keys
    put:
      description: |
        Updates the scopes associated with a specific API key. This operation allows administrators to modify access levels and permissions for API keys, adapting to changing security needs or project requirements.

        **Key Features**:
        - **Scope Management**: Adjusts the access boundaries defined by the API key scopes, ensuring they are kept up-to-date with project roles and permissions.
        - **Flexible Access Control**: Offers the ability to dynamically change API key permissions without needing to recreate keys.

        **Use Cases**:
        - Modifying API key permissions in response to role changes within a project team.
        - Updating key scopes to restrict or expand access as part of security policy adjustments.
      operationId: updateApiKey
      parameters:
      - description: The unique identifier of the project for which the API key is
          managed.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be updated.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: JSON payload containing the new scopes for the API key.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The API key's scopes were updated successfully.
        "400":
          description: "Invalid input, such as unspecified or unsupported scopes."
        "404":
          description: Either the API key or the project was not found.
        "500":
          description: "A server error occurred, preventing the update of the API\
            \ key."
      summary: Update an API key's scopes
      tags:
      - API Keys
  /projects/{projectId}/prompts:
    get:
      description: |
        Retrieves a comprehensive list of all prompts associated with a specific project. This operation is essential for users to view and manage all the prompts under a project, facilitating quick access to any particular prompt and understanding the scope of the project's content.

        **Key Features**:
        - **Comprehensive Overview**: Provides a complete list of all prompts, helping in the overall management and navigation of project content.
        - **Efficient Project Management**: Enables project managers and team members to quickly assess the progress and status of various prompts within the project.

        **Use Cases**:
        - Developers and content creators looking to overview or navigate through all the prompts associated with a specific project.
        - Useful in scenarios where multiple teams or stakeholders need to review or access prompt information collectively.
      operationId: listPrompts
      parameters:
      - description: The unique identifier of the project whose prompts are to be
          listed.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Prompt'
                type: array
          description: Successfully retrieved a list of all prompts in the specified
            project.
        "404":
          description: "Project not found, indicating the specified project ID does\
            \ not exist."
        "500":
          description: "A server error occurred, preventing the retrieval of prompts."
      summary: List all prompts in a project
      tags:
      - Prompts
    post:
      description: |
        Creates a new prompt within a specified project. This endpoint is crucial for expanding project content by adding new prompts, allowing users to input initial details for a new prompt which then becomes part of the project's documentation or content offerings.

        **Key Features**:
        - **Content Expansion**: Allows for the easy addition of new content to a project, supporting dynamic growth and updates.
        - **Customizable Input**: Users can define various attributes of the prompt such as title, description, and specific content parameters through the `PromptInput` schema.

        **Use Cases**:
        - Content managers and creators adding new thematic prompts or content pieces to existing projects.
        - Automating content creation processes by integrating with content management systems that can trigger prompt creations through API calls.
      operationId: createPrompt
      parameters:
      - description: The unique identifier of the project within which the new prompt
          is to be created.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptInput'
        description: "Contains the necessary attributes for creating a new prompt,\
          \ such as title, description, and any specific content elements."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
          description: The prompt was created successfully and is now part of the
            project.
        "400":
          description: "Invalid input provided in the request body, such as missing\
            \ required fields or data that does not conform to the expected format."
        "404":
          description: "Project not found, indicating the specified project ID does\
            \ not exist."
        "500":
          description: "A server error occurred, preventing the creation of the new\
            \ prompt."
      summary: Create a new prompt in a project
      tags:
      - Prompts
  /prompts/{promptId}:
    delete:
      description: |
        Deletes a specific prompt from a project, removing it permanently from the system. This operation is used when a prompt is no longer needed or relevant, or as part of content cleanup and management strategies.

        **Key Usage**:
        - Removing outdated or irrelevant prompts to maintain a clean and efficient project environment.
        - Complying with data retention policies by deleting prompts that are no longer necessary.
      operationId: deletePrompt
      parameters:
      - description: The identifier of the project from which the prompt will be deleted.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the prompt to be deleted.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The prompt was deleted successfully; no content is returned.
        "404":
          description: Either the prompt or the project was not found.
        "500":
          description: "A server error occurred, preventing the deletion of the prompt."
      summary: Delete a specific prompt from a project
      tags:
      - Prompts
    get:
      description: |
        Retrieves detailed information about a specific prompt within a project, including its content, metadata, and any associated versioning details. This endpoint is essential for users who need to view the current state of a prompt or to fetch its details for further processing or display.

        **Key Usage**:
        - Viewing the complete details of a prompt for editorial or review purposes.
        - Fetching prompt data for integration with other tools or services.
      operationId: getPrompt
      parameters:
      - description: The identifier of the project to which the prompt belongs.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the prompt being retrieved.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
          description: Successfully retrieved detailed information about the prompt.
        "404":
          description: Either the prompt or the project was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of the prompt."
      summary: Retrieve a specific prompt within a project
      tags:
      - Prompts
    put:
      description: |
        Updates the content or metadata of a specific prompt within a project. This operation allows users to modify existing prompts to reflect changes in requirements, updates, or corrections. It is crucial for maintaining the accuracy and relevancy of prompt content.

        **Key Usage**:
        - Modifying the text or other properties of a prompt as part of content management workflows.
        - Updating prompt settings or configurations based on new inputs or feedback.
      operationId: updatePrompt
      parameters:
      - description: The identifier of the project that contains the prompt.
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the prompt being updated.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptInput'
        description: JSON payload containing the updated data for the prompt.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prompt'
          description: The prompt was updated successfully.
        "400":
          description: "Invalid input, such as malformed data or incomplete required\
            \ fields."
        "404":
          description: Either the prompt or the project was not found.
        "500":
          description: "A server error occurred, preventing the update of the prompt."
      summary: Update a specific prompt in a project
      tags:
      - Prompts
  /prompts/{promptId}/versions:
    get:
      description: |
        Retrieves a list of all version histories associated with a specific prompt. This endpoint is crucial for understanding the evolution and lifecycle of prompt content, allowing users to access and review all historical and current iterations of a prompt. It provides a comprehensive view of the changes made over time, which is essential for version control, auditing, and rollback operations.

        **Features**:
        - **Version Tracking**: Enables tracking of all changes made to the prompt over its lifecycle, showing who made each change and when.
        - **Audit and Compliance**: Supports compliance with internal and external audit requirements by maintaining a clear record of content changes and updates.
        - **Content Restoration**: Facilitates the restoration of previous versions of the content if needed, allowing for easy recovery of earlier states.

        **Use Cases**:
        - Content managers reviewing the history of prompt updates to ensure accuracy and relevance.
        - Developers integrating version data into other systems for enhanced content lifecycle management.
        - Compliance officers auditing content changes for regulatory adherence.
      operationId: listPromptVersions
      parameters:
      - description: The unique identifier of the prompt whose version history is
          being queried.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptVersion'
                type: array
          description: "Successfully retrieved a list of all versions associated with\
            \ the prompt, including details such as version identifier, creation date,\
            \ and the author of each version."
        "404":
          description: "No prompt found matching the specified identifier, indicating\
            \ that either the prompt does not exist or has been removed."
        "500":
          description: "A server error occurred, preventing the retrieval of version\
            \ information. This might be due to a failure in backend services or a\
            \ database outage."
      summary: List all versions of a specific prompt
      tags:
      - Versions
  /prompts/{promptId}/versions/{versionId}:
    get:
      description: |
        Retrieves detailed information about a specific version of a prompt, or the most recent version if 'latest' is specified as the version ID. This endpoint is crucial for accessing historical data of prompt versions for review or rollback purposes. It allows users to track changes over time and manage different iterations of content efficiently.

        **Features**:
        - **Historical Tracking**: Access any version of the prompt to see its historical state and changes.
        - **Latest Version Access**: Specify 'latest' to automatically retrieve the most current version, facilitating easy access to the newest content without needing to track specific version IDs.

        **Use Cases**:
        - Retrieving a past version of the prompt for audit or comparison.
        - Fetching the latest version for displaying current information or further editing.
        - Integrating version data into other systems for content lifecycle management.

        **Key Parameters**:
        - `promptId`: Identifies the prompt whose version is being queried.
        - `versionId`: Can be a specific version identifier or 'latest' to fetch the most recent version. The special keyword 'latest' simplifies queries for the current version, eliminating the need to know the exact version number.
      operationId: getPromptVersion
      parameters:
      - description: The unique identifier of the prompt.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - example: latest
        explode: false
        in: path
        name: versionId
        required: true
        schema:
          description: "The ID of the version to retrieve, or 'latest' to obtain the\
            \ most recent version."
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptVersion'
          description: Successfully retrieved detailed information about the specified
            version of the prompt.
        "404":
          description: No prompt or version found matching the specified identifiers.
            This includes cases where 'latest' is specified but no versions exist.
        "500":
          description: "A server error occurred, preventing the retrieval of the prompt\
            \ version."
      summary: Retrieve a specific version or the latest version of a prompt
      tags:
      - Versions
  /prompts/{promptId}/drafts:
    get:
      description: |
        Retrieves a list of all draft versions associated with a specific prompt. This operation is essential for tracking the evolution of content within the prompt, allowing users to view different iterations and stages of development. It is particularly useful in environments where multiple revisions or collaborative editing processes are involved.

        **Usage**:
        - Facilitates the management of multiple draft versions.
        - Enables stakeholders to review historical changes and progress on a prompt.
        - Supports collaborative review by providing access to various draft submissions.
      operationId: listPromptDrafts
      parameters:
      - description: The unique identifier of the prompt for which drafts are being
          listed.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PromptDraft'
                type: array
          description: Successfully retrieved a list of all drafts for the specified
            prompt.
        "404":
          description: The specified prompt was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of draft\
            \ data."
      summary: List all drafts of a specific prompt
      tags:
      - Drafts
    post:
      description: |
        Creates a new draft version for a specific prompt. This endpoint allows users to start a new revision cycle by submitting initial draft content or proposals. It supports workflows where new ideas, updates, or revisions are periodically added to an ongoing project.

        **Usage**:
        - Initiates a new draft for collaborative editing or further development.
        - Helps in managing version control by starting a new branch of content development.

        **Requirements**:
        - Users must provide initial content or parameters for the draft as defined in the `PromptDraftInput` schema.
        - Appropriate permissions are required to create drafts, typically restricted to content creators or project managers.
      operationId: createPromptDraft
      parameters:
      - description: The unique identifier of the prompt for which a new draft is
          being created.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromptDraftInput'
        description: "Contains the necessary information for creating a new draft,\
          \ such as initial content or metadata."
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptDraft'
          description: Draft created successfully and is now available for review
            or further editing.
        "400":
          description: "Invalid input, such as missing required fields or malformed\
            \ data."
        "404":
          description: "The specified prompt was not found, and thus the draft could\
            \ not be created."
        "500":
          description: "A server error occurred, preventing the creation of a new\
            \ draft."
      summary: Create a new draft for a prompt
      tags:
      - Drafts
  /prompts/{promptId}/drafts/{draftId}/comments:
    get:
      description: "Retrieves a comprehensive list of all comments made on a specific\
        \ draft. This endpoint is essential for review processes, providing a complete\
        \ view of all discussions, feedback, and interactions associated with the\
        \ draft. \n\n**Use Cases**:\n- Reviewing all feedback received on a draft\
        \ before finalizing content.\n- Auditing comments for compliance and oversight.\n\
        - Engaging in dialogue with contributors directly within the drafting process.\n\
        \n**Output**:\n- Returns a list of comments, each including details such as\
        \ the comment text, author, and timestamp.\n"
      operationId: listCommentsOnDraft
      parameters:
      - description: The unique identifier of the prompt associated with the draft.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft whose comments are being listed.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Comment'
                type: array
          description: Successfully retrieved the list of all comments.
        "404":
          description: Either the prompt or draft specified was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of comments."
      summary: List all comments on a draft
      tags:
      - Comments
    post:
      description: |
        Allows users to post comments on a specific draft. This feature facilitates collaborative editing by enabling stakeholders to provide feedback, ask questions, or suggest improvements directly on the draft content. Each comment is associated with the draft identified by `draftId` under the prompt `promptId`.

        **Key Features**:
        - Supports collaborative review workflows.
        - Enables targeted feedback on draft content.
        - Integrates seamlessly into document review cycles, enhancing communication among reviewers and authors.

        **Requirements**:
        - Users must be authenticated and authorized to comment on the draft.
        - The comment must contain valid content as defined in the `CommentInput` schema.
      operationId: addCommentToDraft
      parameters:
      - description: The unique identifier of the prompt associated with the draft.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft to which the comment will
          be added.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
        description: Payload containing the comment content and any optional metadata.
        required: true
      responses:
        "201":
          description: Comment added successfully to the draft.
        "400":
          description: "Invalid request data, such as missing or malformed comment\
            \ content."
        "404":
          description: Either the prompt or draft specified was not found.
        "500":
          description: "A server error occurred, preventing the comment from being\
            \ added."
      summary: Add a comment to a draft
      tags:
      - Comments
  /prompts/{promptId}/drafts/{draftId}/comments/{commentId}:
    delete:
      description: |
        Removes a comment from a draft, effectively deleting it from the system. This operation is used when comments are no longer relevant, are incorrect, or need to be removed for compliance reasons.

        **Use Cases**:
        - Removing outdated or no longer relevant comments.
        - Deleting comments that may have been posted in error.
        - Compliance with data retention policies or requests for comment removal.

        **Requirements**:
        - The user requesting the deletion should have permissions to delete comments, typically either the comment creator or an administrator.
      operationId: deleteCommentFromDraft
      parameters:
      - description: The unique identifier of the prompt associated with the comment.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft from which the comment is
          being deleted.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the comment to be deleted.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The comment was deleted successfully, no content returned."
        "404":
          description: The specified comment was not found.
        "500":
          description: A server error occurred preventing the deletion of the comment.
      summary: Delete a comment from a draft
      tags:
      - Comments
    put:
      description: |
        Allows editing of an existing comment on a specific draft. This operation enables users to modify the content of their comments, which can be crucial for correcting errors, updating information, or refining the communication within a collaborative environment.

        **Use Cases**:
        - Correcting spelling or grammatical errors in a previously submitted comment.
        - Updating the comment to reflect new insights or additional information.
        - Refining responses based on ongoing discussions or feedback.

        **Requirements**:
        - The comment must exist, and the user requesting the update should have the appropriate permissions to edit the comment.
      operationId: updateCommentOnDraft
      parameters:
      - description: The unique identifier of the prompt.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft to which the comment belongs.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the comment being updated.
        explode: false
        in: path
        name: commentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
        description: Contains the updated data for the comment.
        required: true
      responses:
        "200":
          description: The comment was updated successfully.
        "400":
          description: "Invalid request data, such as missing content in the comment\
            \ update."
        "404":
          description: "The specified prompt, draft, or comment was not found."
        "500":
          description: A server error occurred preventing the comment update.
      summary: Update a comment on a draft
      tags:
      - Comments
  /prompts/{promptId}/drafts/{draftId}/approvals:
    delete:
      description: "This endpoint allows for the removal of a specific approval from\
        \ a draft by a given user. It is typically used in scenarios where an approver\
        \ wishes to retract their approval due to changes in the draft or errors in\
        \ the initial review. \n\n**Operation Details:**\n- The API checks if the\
        \ approval corresponding to the provided `promptId`, and `draftId` exists.\
        \ \n- If found, the approval is removed, effectively changing the status of\
        \ the draft if the approval was necessary for it to be considered fully approved.\n\
        - This operation is only permitted if the user associated with `userId` has\
        \ the rights to modify the approval status, either as the original approver\
        \ or as an administrator.\n\n**Preconditions:**\n- The draft identified by\
        \ `draftId` must exist within the prompt specified by `promptId`.\n- The user\
        \ must have previously approved the draft.\n- The user must have permissions\
        \ to retract approvals.\n\n**Postconditions:**\n- The draft will no longer\
        \ have the user's approval.\n- If the draft's approval policy requires multiple\
        \ approvals, the removal of this approval may affect its readiness for merging\
        \ or publishing.\n\nUse this endpoint with caution as it can impact the workflow\
        \ of content approval and publication.\n"
      operationId: removeApprovalFromDraft
      parameters:
      - description: The unique identifier of the prompt associated with the draft.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft from which the approval is
          to be removed.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Approval removed successfully. No content is returned.
        "404":
          description: "Either the prompt, draft, or approval specified was not found."
        "500":
          description: A server error occurred preventing the operation.
      summary: Remove an approval from a draft
      tags:
      - Approvals
    get:
      description: |
        Retrieves a list of all approvals associated with a specific draft. This endpoint is useful for audit purposes and managing draft reviews, providing an overview of who has approved the draft and any associated comments or metadata. It helps in understanding the approval state of the draft, whether it is ready to be finalized or requires more reviews.

        **Usage**:
        - Useful in collaborative environments where multiple approvals are needed.
        - Helps in tracking the approval process and ensuring all necessary validations are met before publishing or merging a draft.
      operationId: listApprovalsOnDraft
      parameters:
      - description: The unique identifier of the prompt associated with the draft.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft whose approvals are being
          listed.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Approval'
                type: array
          description: Successfully retrieved the list of approvals.
        "404":
          description: Either the prompt or the draft specified was not found.
        "500":
          description: "A server error occurred, preventing the retrieval of approvals."
      summary: List all approvals on a draft
      tags:
      - Approvals
    post:
      description: |
        Submits an approval for a draft from the authenticated user. This endpoint does not require explicit input for the approval as it assumes the user's identity and approval intent are derived from the authentication context. The system records the approval along with any automatic timestamp and the user's ID.

        **Usage**:
        - Allows a user to approve a draft indicating readiness or agreement with its content.
        - Automatically logs the approval action for compliance and tracking.
      operationId: addApprovalToDraft
      parameters:
      - description: The unique identifier of the prompt associated with the draft
          being approved.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft to which the approval is being
          added.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApprovalInput'
        description: No input is required as the approval assumes authenticated user
          context.
        required: false
      responses:
        "201":
          description: "Approval added successfully, including the user's ID and the\
            \ timestamp."
        "400":
          description: "Invalid request, possibly due to missing authentication or\
            \ authorization."
        "404":
          description: Either the prompt or the draft specified was not found.
        "500":
          description: "A server error occurred, preventing the addition of the approval."
      summary: Add an approval to a draft
      tags:
      - Approvals
  /prompts/{promptId}/drafts/{draftId}/merge:
    post:
      description: |
        This endpoint merges an approved draft into a new version of the prompt. It requires that the draft has received all necessary approvals as specified by the workflow rules. Upon successful merging, a new version of the prompt is created with the content from the approved draft.

        The operation checks that the specified draft has the status 'approved'. If the draft does not meet this criterion, or if any other validation fails (such as the prompt or draft not existing), an error is returned. This endpoint is crucial for transitioning a draft, which has been collaboratively edited and reviewed, into a finalized version that is accessible to end users.

        **Requirements:**
        - The draft must be explicitly marked as approved.
        - Both the `promptId` and `draftId` must correspond to existing records.

        **Process:**
        - Validate the existence and status of the draft and the prompt.
        - Merge the draft content into the main prompt structure, creating a new version.
        - Archive or mark the draft as merged.

        **Use Cases:**
        - Finalizing content revisions in a collaborative editing environment.
        - Updating official documentation or feature descriptions after a review process.
      operationId: mergeDraftIntoVersion
      parameters:
      - description: The unique identifier of the prompt to which the draft belongs.
        explode: false
        in: path
        name: promptId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the draft to be merged.
        explode: false
        in: path
        name: draftId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Draft successfully merged and a new version of the prompt was
            created.
        "400":
          description: The draft is not approved or other validation errors occurred.
        "404":
          description: Either the prompt or the draft specified by the IDs was not
            found.
        "500":
          description: An unexpected error occurred which prevented the merging operation.
      summary: Merge an approved draft into a new version
      tags:
      - Drafts
components:
  schemas:
    Organization:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: id
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the organization
          type: string
        name:
          description: Name of the organization
          type: string
        description:
          description: Description for the organization
          type: string
        createdAt:
          description: Timestamp of organization creation
          format: date-time
          type: string
        updatedAt:
          description: Timestamp of the last update to the organization
          format: date-time
          type: string
      type: object
    OrganizationInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the organization
          type: string
        description:
          description: Description for the organization
          type: string
      required:
      - name
      type: object
    Team:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: id
        orgId: orgId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the team
          type: string
        name:
          description: Name of the team
          type: string
        description:
          description: A brief description of the team
          type: string
        orgId:
          description: The organization to which the team belongs
          type: string
        createdAt:
          description: Timestamp of team creation
          format: date-time
          type: string
        updatedAt:
          description: Timestamp of the last update to the team
          format: date-time
          type: string
      type: object
    TeamInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the team
          type: string
        description:
          description: A brief description of the team
          type: string
      required:
      - name
      type: object
    User:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: id
        email: email
        updatedAt: updatedAt
      properties:
        id:
          description: Unique identifier for the user
          type: string
        email:
          description: User's email address
          type: string
        createdAt:
          description: Timestamp of user creation
          format: date-time
          type: string
        updatedAt:
          type: string
      type: object
    UserInput:
      example:
        email: email
      properties:
        email:
          description: User's email address
          type: string
      required:
      - email
      type: object
    Project:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        teamId: teamId
        name: name
        description: description
        id: id
        orgId: orgId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the project
          type: string
        name:
          description: Name of the project
          type: string
        description:
          description: A brief description of the project
          type: string
        orgId:
          description: Identifier for the organization to which the project belongs
          type: string
        teamId:
          description: Identifier for the team to which the project belongs
          type: string
        createdAt:
          description: Timestamp when the project was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the project was last updated
          format: date-time
          type: string
      type: object
    ProjectInput:
      example:
        teamId: teamId
        name: name
        description: description
        orgId: orgId
      properties:
        name:
          description: Name of the project
          type: string
        description:
          description: A brief description of the project
          type: string
        orgId:
          description: Identifier for the organization to which the project belongs
          type: string
        teamId:
          description: Identifier for the team to which the project belongs
          type: string
      required:
      - name
      type: object
    ApiKey:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: id
        scopes:
        - scopes
        - scopes
        projectId: projectId
        key: key
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the API key
          type: string
        key:
          description: The API key token
          type: string
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        projectId:
          description: The project ID this API key belongs to
          type: string
        createdAt:
          description: Timestamp when the API key was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the API key was last updated
          format: date-time
          type: string
      type: object
    ApiKeyInput:
      example:
        scopes:
        - scopes
        - scopes
      properties:
        scopes:
          description: List of scopes or permissions to be granted to this API key
          items:
            type: string
          type: array
      required:
      - scopes
      type: object
    Prompt:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: id
        projectId: projectId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the prompt
          type: string
        name:
          description: Name of the prompt
          type: string
        description:
          description: A brief description of the project
          type: string
        projectId:
          description: Identifier of the project this prompt belongs to
          type: string
        createdAt:
          description: Timestamp when the prompt was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the prompt was last updated
          format: date-time
          type: string
      type: object
    PromptInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the prompt
          type: string
        description:
          description: A brief description of the project
          type: string
      required:
      - name
      type: object
    PromptVersion:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        promptId: promptId
        id: id
        content: content
      properties:
        id:
          description: Unique identifier for the version of the prompt
          type: string
        content:
          description: Content of the prompt at this version
          type: string
        promptId:
          description: Identifier of the prompt this version belongs to
          type: string
        createdAt:
          description: Timestamp when this version was created
          format: date-time
          type: string
      type: object
    PromptVersionInput:
      properties:
        content:
          description: Content of the prompt at this version
          type: string
      required:
      - content
      type: object
    PromptDraft:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        promptId: promptId
        name: name
        description: description
        id: id
        content: content
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the draft
          type: string
        name:
          description: Name of the draft
          type: string
        description:
          description: A brief description of the project
          type: string
        content:
          description: Content of the draft
          type: string
        promptId:
          description: Identifier of the prompt this draft belongs to
          type: string
        createdAt:
          description: Timestamp when the draft was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the draft was last updated
          format: date-time
          type: string
      type: object
    PromptDraftInput:
      example:
        name: name
        description: description
        content: content
      properties:
        name:
          description: Name of the draft
          type: string
        description:
          description: A brief description of the project
          type: string
        content:
          description: Content of the draft
          type: string
      required:
      - content
      - name
      type: object
    Comment:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: id
        text: text
        lineNumber: 0
        userId: userId
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier for the comment
          type: string
        userId:
          description: User ID of the author of the comment
          type: string
        text:
          description: Text content of the comment
          type: string
        lineNumber:
          description: Optional reference to a specific line in the draft content
          type: integer
        createdAt:
          description: Timestamp when the comment was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the comment was last updated
          format: date-time
          type: string
      type: object
    CommentInput:
      example:
        text: text
        lineNumber: 0
      properties:
        text:
          description: Text content of the comment
          type: string
        lineNumber:
          description: Optional reference to a specific line in the draft content
          type: integer
      required:
      - text
      type: object
    Approval:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        userId: userId
      properties:
        userId:
          description: User ID of the person who approved the draft
          type: string
        createdAt:
          description: Timestamp when the approval was given
          format: date-time
          type: string
      type: object
    ApprovalInput:
      type: object
    healthCheck_200_response_details:
      example:
        database: connected
        uptime: 0.8008281904610115
      properties:
        database:
          example: connected
          type: string
        uptime:
          description: "Time in milliseconds that the API has been operational, indicating\
            \ stability and reliability."
          format: double
          type: number
      type: object
    healthCheck_200_response:
      example:
        details:
          database: connected
          uptime: 0.8008281904610115
        status: healthy
      properties:
        status:
          example: healthy
          type: string
        details:
          $ref: '#/components/schemas/healthCheck_200_response_details'
      type: object
    healthCheck_500_response:
      example:
        error: Database connection failed
        status: unhealthy
      properties:
        status:
          example: unhealthy
          type: string
        error:
          example: Database connection failed
          type: string
      type: object
    createProject_400_response:
      example:
        error: Required field 'name' missing
      properties:
        error:
          example: Required field 'name' missing
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |
        API Key authentication provides a straightforward method for clients to authenticate requests. This scheme expects an API key to be supplied in the headers of each request. Clients must include the API key in the 'X-API-KEY' header field.

        **How to use**:
        - Obtain an API key from the API provider.
        - Include the API key in the header of each request to the API as follows:
          ```
          X-API-KEY: {api_key}
          ```
        - The API validates the key against its database, and if the key is valid, allows access to the requested resources.

        **Advantages**:
        - Simple and easy to implement.
        - Suitable for accessing public APIs where security requirements are not excessively strict.

        **Limitations**:
        - Less secure than more complex authentication methods, such as tokens, as API keys can be easily exposed in transit or storage.
        - API keys do not expire by default and revoking them requires direct intervention.
      in: header
      name: X-API-KEY
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: |
        Bearer Token authentication uses JSON Web Tokens (JWT) to verify the identity of the requester. This scheme is included in the Authorization header of each HTTP request using the Bearer format.

        **How to use**:
        - Obtain a JWT from the authentication server. Typically, this involves an initial request with credentials (username/password) to receive the token.
        - Include the token in the Authorization header of your HTTP requests as follows:
          ```
          Authorization: Bearer {token}
          ```
        - The server decodes the JWT to verify its validity and authorizes the request based on the token's payload and signature.

        **Advantages**:
        - Offers more security than API key authentication as the token content is protected by cryptographic algorithms.
        - Tokens can be designed to expire after a certain period, enhancing security by limiting the duration of their validity.

        **Limitations**:
        - Requires a more complex backend setup to issue and verify tokens.
        - Handling token renewal and revocation can add overhead to client and server implementations.

        **Example**:
        To access protected routes or resources, the client must authenticate by providing the JWT in the authorization header:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiw
      scheme: bearer
      type: http
