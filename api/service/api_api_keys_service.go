// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package service

import (
	"context"
	"github.com/payloadops/plato/api/openapi"
	"net/http"
	"errors"
)

// APIKeysAPIService is a service that implements the logic for the APIKeysAPIServicer
// This service should implement the business logic for every endpoint for the APIKeysAPI API.
// Include any external packages or services that will be required by this service.
type APIKeysAPIService struct {
}

// NewAPIKeysAPIService creates a default api service
func NewAPIKeysAPIService() openapi.APIKeysAPIServicer {
	return &APIKeysAPIService{}
}

// DeleteApiKey - Delete a specific API key
func (s *APIKeysAPIService) DeleteApiKey(ctx context.Context, projectId string, keyId string) (openapi.ImplResponse, error) {
	// TODO - update DeleteApiKey with the required logic for this service method.
	// Add api_api_keys_service.openapi to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	// return Response(500, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("DeleteApiKey method not implemented")
}

// GenerateApiKey - Generate a new API key with specific scopes for a project
func (s *APIKeysAPIService) GenerateApiKey(ctx context.Context, projectId string, apiKeyInput openapi.ApiKeyInput) (openapi.ImplResponse, error) {
	// TODO - update GenerateApiKey with the required logic for this service method.
	// Add api_api_keys_service.openapi to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, ApiKey{}) or use other options such as http.Ok ...
	// return Response(201, ApiKey{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	// return Response(500, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("GenerateApiKey method not implemented")
}

// GetApiKey - Retrieve a specific API key
func (s *APIKeysAPIService) GetApiKey(ctx context.Context, projectId string, keyId string) (openapi.ImplResponse, error) {
	// TODO - update GetApiKey with the required logic for this service method.
	// Add api_api_keys_service.openapi to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, ApiKey{}) or use other options such as http.Ok ...
	// return Response(200, ApiKey{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	// return Response(500, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("GetApiKey method not implemented")
}

// ListApiKeys - List all API keys for a project
func (s *APIKeysAPIService) ListApiKeys(ctx context.Context, projectId string) (openapi.ImplResponse, error) {
	// TODO - update ListApiKeys with the required logic for this service method.
	// Add api_api_keys_service.openapi to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []ApiKey{}) or use other options such as http.Ok ...
	// return Response(200, []ApiKey{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	// return Response(500, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("ListApiKeys method not implemented")
}

// UpdateApiKey - Update an API key&#39;s scopes
func (s *APIKeysAPIService) UpdateApiKey(ctx context.Context, projectId string, keyId string, apiKeyInput openapi.ApiKeyInput) (openapi.ImplResponse, error) {
	// TODO - update UpdateApiKey with the required logic for this service method.
	// Add api_api_keys_service.openapi to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, ApiKey{}) or use other options such as http.Ok ...
	// return Response(200, ApiKey{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(500, {}) or use other options such as http.Ok ...
	// return Response(500, nil),nil

	return openapi.Response(http.StatusNotImplemented, nil), errors.New("UpdateApiKey method not implemented")
}
