// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// PromptsAPIController binds http requests to an api service and writes the service results to the http response
type PromptsAPIController struct {
	service PromptsAPIServicer
	errorHandler ErrorHandler
}

// PromptsAPIOption for how the controller is set up.
type PromptsAPIOption func(*PromptsAPIController)

// WithPromptsAPIErrorHandler inject ErrorHandler into controller
func WithPromptsAPIErrorHandler(h ErrorHandler) PromptsAPIOption {
	return func(c *PromptsAPIController) {
		c.errorHandler = h
	}
}

// NewPromptsAPIController creates a default api controller
func NewPromptsAPIController(s PromptsAPIServicer, opts ...PromptsAPIOption) Router {
	controller := &PromptsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PromptsAPIController
func (c *PromptsAPIController) Routes() Routes {
	return Routes{
		"CreatePrompt": Route{
			strings.ToUpper("Post"),
			"/v1/projects/{projectId}/prompts",
			c.CreatePrompt,
		},
		"DeletePrompt": Route{
			strings.ToUpper("Delete"),
			"/v1/prompts/{promptId}",
			c.DeletePrompt,
		},
		"GetPrompt": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}",
			c.GetPrompt,
		},
		"ListPrompts": Route{
			strings.ToUpper("Get"),
			"/v1/projects/{projectId}/prompts",
			c.ListPrompts,
		},
		"UpdatePrompt": Route{
			strings.ToUpper("Put"),
			"/v1/prompts/{promptId}",
			c.UpdatePrompt,
		},
	}
}

// CreatePrompt - Create a new prompt in a project
func (c *PromptsAPIController) CreatePrompt(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptInputParam := PromptInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&promptInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPromptInputRequired(promptInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPromptInputConstraints(promptInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePrompt(r.Context(), projectIdParam, promptInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePrompt - Delete a specific prompt from a project
func (c *PromptsAPIController) DeletePrompt(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	result, err := c.service.DeletePrompt(r.Context(), projectIdParam, promptIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPrompt - Retrieve a specific prompt within a project
func (c *PromptsAPIController) GetPrompt(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	result, err := c.service.GetPrompt(r.Context(), projectIdParam, promptIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListPrompts - List all prompts in a project
func (c *PromptsAPIController) ListPrompts(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	result, err := c.service.ListPrompts(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePrompt - Update a specific prompt in a project
func (c *PromptsAPIController) UpdatePrompt(w http.ResponseWriter, r *http.Request) {
	projectIdParam := chi.URLParam(r, "projectId")
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	promptInputParam := PromptInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&promptInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPromptInputRequired(promptInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPromptInputConstraints(promptInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePrompt(r.Context(), projectIdParam, promptIdParam, promptInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
