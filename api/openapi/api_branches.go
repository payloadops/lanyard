// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// BranchesAPIController binds http requests to an api service and writes the service results to the http response
type BranchesAPIController struct {
	service BranchesAPIServicer
	errorHandler ErrorHandler
}

// BranchesAPIOption for how the controller is set up.
type BranchesAPIOption func(*BranchesAPIController)

// WithBranchesAPIErrorHandler inject ErrorHandler into controller
func WithBranchesAPIErrorHandler(h ErrorHandler) BranchesAPIOption {
	return func(c *BranchesAPIController) {
		c.errorHandler = h
	}
}

// NewBranchesAPIController creates a default api controller
func NewBranchesAPIController(s BranchesAPIServicer, opts ...BranchesAPIOption) Router {
	controller := &BranchesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BranchesAPIController
func (c *BranchesAPIController) Routes() Routes {
	return Routes{
		"CreatePromptBranch": Route{
			strings.ToUpper("Post"),
			"/v1/prompts/{promptId}/branches",
			c.CreatePromptBranch,
		},
		"DeleteBranch": Route{
			strings.ToUpper("Delete"),
			"/v1/prompts/{promptId}/branches/{branchId}",
			c.DeleteBranch,
		},
		"GetBranch": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/branches/{branchId}",
			c.GetBranch,
		},
		"ListPromptBranches": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/branches",
			c.ListPromptBranches,
		},
	}
}

// CreatePromptBranch - Create a new branch for a prompt
func (c *BranchesAPIController) CreatePromptBranch(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchInputParam := BranchInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&branchInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBranchInputRequired(branchInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBranchInputConstraints(branchInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePromptBranch(r.Context(), promptIdParam, branchInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBranch - Delete a specific branch
func (c *BranchesAPIController) DeleteBranch(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchIdParam := chi.URLParam(r, "branchId")
	if branchIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"branchId"}, nil)
		return
	}
	result, err := c.service.DeleteBranch(r.Context(), promptIdParam, branchIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBranch - Retrieve a specific branch
func (c *BranchesAPIController) GetBranch(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchIdParam := chi.URLParam(r, "branchId")
	if branchIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"branchId"}, nil)
		return
	}
	result, err := c.service.GetBranch(r.Context(), promptIdParam, branchIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListPromptBranches - List all branches of a specific prompt
func (c *BranchesAPIController) ListPromptBranches(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	result, err := c.service.ListPromptBranches(r.Context(), promptIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
