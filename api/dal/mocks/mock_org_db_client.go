// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/api/dal (interfaces: OrganizationManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_org_db_client.go github.com/payloadops/plato/api/dal OrganizationManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/api/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizationManager is a mock of OrganizationManager interface.
type MockOrganizationManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationManagerMockRecorder
}

// MockOrganizationManagerMockRecorder is the mock recorder for MockOrganizationManager.
type MockOrganizationManagerMockRecorder struct {
	mock *MockOrganizationManager
}

// NewMockOrganizationManager creates a new mock instance.
func NewMockOrganizationManager(ctrl *gomock.Controller) *MockOrganizationManager {
	mock := &MockOrganizationManager{ctrl: ctrl}
	mock.recorder = &MockOrganizationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationManager) EXPECT() *MockOrganizationManagerMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method.
func (m *MockOrganizationManager) CreateOrganization(arg0 context.Context, arg1 dal.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockOrganizationManagerMockRecorder) CreateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationManager)(nil).CreateOrganization), arg0, arg1)
}

// DeleteOrganization mocks base method.
func (m *MockOrganizationManager) DeleteOrganization(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockOrganizationManagerMockRecorder) DeleteOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockOrganizationManager)(nil).DeleteOrganization), arg0, arg1)
}

// GetOrganization mocks base method.
func (m *MockOrganizationManager) GetOrganization(arg0 context.Context, arg1 string) (*dal.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganization", arg0, arg1)
	ret0, _ := ret[0].(*dal.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganization indicates an expected call of GetOrganization.
func (mr *MockOrganizationManagerMockRecorder) GetOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganization", reflect.TypeOf((*MockOrganizationManager)(nil).GetOrganization), arg0, arg1)
}

// ListOrganizations mocks base method.
func (m *MockOrganizationManager) ListOrganizations(arg0 context.Context) ([]dal.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", arg0)
	ret0, _ := ret[0].([]dal.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockOrganizationManagerMockRecorder) ListOrganizations(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockOrganizationManager)(nil).ListOrganizations), arg0)
}

// UpdateOrganization mocks base method.
func (m *MockOrganizationManager) UpdateOrganization(arg0 context.Context, arg1 dal.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockOrganizationManagerMockRecorder) UpdateOrganization(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockOrganizationManager)(nil).UpdateOrganization), arg0, arg1)
}
