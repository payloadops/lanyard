// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/payloadops/plato/api/dal (interfaces: BranchManager)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_branch_db_client.go github.com/payloadops/plato/api/dal BranchManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dal "github.com/payloadops/plato/api/dal"
	gomock "go.uber.org/mock/gomock"
)

// MockBranchManager is a mock of BranchManager interface.
type MockBranchManager struct {
	ctrl     *gomock.Controller
	recorder *MockBranchManagerMockRecorder
}

// MockBranchManagerMockRecorder is the mock recorder for MockBranchManager.
type MockBranchManagerMockRecorder struct {
	mock *MockBranchManager
}

// NewMockBranchManager creates a new mock instance.
func NewMockBranchManager(ctrl *gomock.Controller) *MockBranchManager {
	mock := &MockBranchManager{ctrl: ctrl}
	mock.recorder = &MockBranchManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchManager) EXPECT() *MockBranchManagerMockRecorder {
	return m.recorder
}

// CreateBranch mocks base method.
func (m *MockBranchManager) CreateBranch(arg0 context.Context, arg1 dal.Branch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockBranchManagerMockRecorder) CreateBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockBranchManager)(nil).CreateBranch), arg0, arg1)
}

// DeleteBranch mocks base method.
func (m *MockBranchManager) DeleteBranch(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockBranchManagerMockRecorder) DeleteBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockBranchManager)(nil).DeleteBranch), arg0, arg1)
}

// GetBranch mocks base method.
func (m *MockBranchManager) GetBranch(arg0 context.Context, arg1 string) (*dal.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(*dal.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockBranchManagerMockRecorder) GetBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockBranchManager)(nil).GetBranch), arg0, arg1)
}

// ListBranches mocks base method.
func (m *MockBranchManager) ListBranches(arg0 context.Context) ([]dal.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranches", arg0)
	ret0, _ := ret[0].([]dal.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockBranchManagerMockRecorder) ListBranches(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockBranchManager)(nil).ListBranches), arg0)
}

// ListBranchesByPrompt mocks base method.
func (m *MockBranchManager) ListBranchesByPrompt(arg0 context.Context, arg1 string) ([]dal.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranchesByPrompt", arg0, arg1)
	ret0, _ := ret[0].([]dal.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranchesByPrompt indicates an expected call of ListBranchesByPrompt.
func (mr *MockBranchManagerMockRecorder) ListBranchesByPrompt(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranchesByPrompt", reflect.TypeOf((*MockBranchManager)(nil).ListBranchesByPrompt), arg0, arg1)
}
