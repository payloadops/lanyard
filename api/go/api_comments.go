// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// CommentsAPIController binds http requests to an api service and writes the service results to the http response
type CommentsAPIController struct {
	service CommentsAPIServicer
	errorHandler ErrorHandler
}

// CommentsAPIOption for how the controller is set up.
type CommentsAPIOption func(*CommentsAPIController)

// WithCommentsAPIErrorHandler inject ErrorHandler into controller
func WithCommentsAPIErrorHandler(h ErrorHandler) CommentsAPIOption {
	return func(c *CommentsAPIController) {
		c.errorHandler = h
	}
}

// NewCommentsAPIController creates a default api controller
func NewCommentsAPIController(s CommentsAPIServicer, opts ...CommentsAPIOption) Router {
	controller := &CommentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommentsAPIController
func (c *CommentsAPIController) Routes() Routes {
	return Routes{
		"AddCommentToDraft": Route{
			strings.ToUpper("Post"),
			"/v1/prompts/{promptId}/drafts/{draftId}/comments",
			c.AddCommentToDraft,
		},
		"DeleteCommentFromDraft": Route{
			strings.ToUpper("Delete"),
			"/v1/prompts/{promptId}/drafts/{draftId}/comments/{commentId}",
			c.DeleteCommentFromDraft,
		},
		"ListCommentsOnDraft": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/drafts/{draftId}/comments",
			c.ListCommentsOnDraft,
		},
		"UpdateCommentOnDraft": Route{
			strings.ToUpper("Put"),
			"/v1/prompts/{promptId}/drafts/{draftId}/comments/{commentId}",
			c.UpdateCommentOnDraft,
		},
	}
}

// AddCommentToDraft - Add a comment to a draft
func (c *CommentsAPIController) AddCommentToDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	commentInputParam := CommentInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentInputRequired(commentInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentInputConstraints(commentInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCommentToDraft(r.Context(), promptIdParam, draftIdParam, commentInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCommentFromDraft - Delete a comment from a draft
func (c *CommentsAPIController) DeleteCommentFromDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	commentIdParam := chi.URLParam(r, "commentId")
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	result, err := c.service.DeleteCommentFromDraft(r.Context(), promptIdParam, draftIdParam, commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListCommentsOnDraft - List all comments on a draft
func (c *CommentsAPIController) ListCommentsOnDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	result, err := c.service.ListCommentsOnDraft(r.Context(), promptIdParam, draftIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCommentOnDraft - Update a comment on a draft
func (c *CommentsAPIController) UpdateCommentOnDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	commentIdParam := chi.URLParam(r, "commentId")
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	commentInputParam := CommentInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentInputRequired(commentInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentInputConstraints(commentInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCommentOnDraft(r.Context(), promptIdParam, draftIdParam, commentIdParam, commentInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
