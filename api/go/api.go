// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"context"
	"net/http"
)



// APIKeysAPIRouter defines the required methods for binding the api requests to a responses for the APIKeysAPI
// The APIKeysAPIRouter implementation should parse necessary information from the http request,
// pass the data to a APIKeysAPIServicer to perform the required actions, then write the service results to the http response.
type APIKeysAPIRouter interface { 
	DeleteApiKey(http.ResponseWriter, *http.Request)
	GenerateApiKey(http.ResponseWriter, *http.Request)
	GetApiKey(http.ResponseWriter, *http.Request)
	ListApiKeys(http.ResponseWriter, *http.Request)
	UpdateApiKey(http.ResponseWriter, *http.Request)
}
// ApprovalsAPIRouter defines the required methods for binding the api requests to a responses for the ApprovalsAPI
// The ApprovalsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ApprovalsAPIServicer to perform the required actions, then write the service results to the http response.
type ApprovalsAPIRouter interface { 
	AddApprovalToDraft(http.ResponseWriter, *http.Request)
	ListApprovalsOnDraft(http.ResponseWriter, *http.Request)
	RemoveApprovalFromDraft(http.ResponseWriter, *http.Request)
}
// CommentsAPIRouter defines the required methods for binding the api requests to a responses for the CommentsAPI
// The CommentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CommentsAPIServicer to perform the required actions, then write the service results to the http response.
type CommentsAPIRouter interface { 
	AddCommentToDraft(http.ResponseWriter, *http.Request)
	DeleteCommentFromDraft(http.ResponseWriter, *http.Request)
	ListCommentsOnDraft(http.ResponseWriter, *http.Request)
	UpdateCommentOnDraft(http.ResponseWriter, *http.Request)
}
// DraftsAPIRouter defines the required methods for binding the api requests to a responses for the DraftsAPI
// The DraftsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DraftsAPIServicer to perform the required actions, then write the service results to the http response.
type DraftsAPIRouter interface { 
	CreatePromptDraft(http.ResponseWriter, *http.Request)
	ListPromptDrafts(http.ResponseWriter, *http.Request)
	MergeDraftIntoVersion(http.ResponseWriter, *http.Request)
}
// HealthCheckAPIRouter defines the required methods for binding the api requests to a responses for the HealthCheckAPI
// The HealthCheckAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HealthCheckAPIServicer to perform the required actions, then write the service results to the http response.
type HealthCheckAPIRouter interface { 
	HealthCheck(http.ResponseWriter, *http.Request)
}
// OrganizationsAPIRouter defines the required methods for binding the api requests to a responses for the OrganizationsAPI
// The OrganizationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a OrganizationsAPIServicer to perform the required actions, then write the service results to the http response.
type OrganizationsAPIRouter interface { 
	CreateOrganization(http.ResponseWriter, *http.Request)
	DeleteOrganization(http.ResponseWriter, *http.Request)
	GetOrganization(http.ResponseWriter, *http.Request)
	ListOrganizations(http.ResponseWriter, *http.Request)
	UpdateOrganization(http.ResponseWriter, *http.Request)
}
// ProjectsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectsAPI
// The ProjectsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectsAPIRouter interface { 
	CreateProject(http.ResponseWriter, *http.Request)
	DeleteProject(http.ResponseWriter, *http.Request)
	GetProject(http.ResponseWriter, *http.Request)
	ListProjects(http.ResponseWriter, *http.Request)
	UpdateProject(http.ResponseWriter, *http.Request)
}
// PromptsAPIRouter defines the required methods for binding the api requests to a responses for the PromptsAPI
// The PromptsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PromptsAPIServicer to perform the required actions, then write the service results to the http response.
type PromptsAPIRouter interface { 
	CreatePrompt(http.ResponseWriter, *http.Request)
	DeletePrompt(http.ResponseWriter, *http.Request)
	GetPrompt(http.ResponseWriter, *http.Request)
	ListPrompts(http.ResponseWriter, *http.Request)
	UpdatePrompt(http.ResponseWriter, *http.Request)
}
// TeamsAPIRouter defines the required methods for binding the api requests to a responses for the TeamsAPI
// The TeamsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TeamsAPIServicer to perform the required actions, then write the service results to the http response.
type TeamsAPIRouter interface { 
	CreateTeam(http.ResponseWriter, *http.Request)
	DeleteTeam(http.ResponseWriter, *http.Request)
	GetTeam(http.ResponseWriter, *http.Request)
	ListTeams(http.ResponseWriter, *http.Request)
	UpdateTeam(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	CreateUser(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	ListUsers(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
}
// VersionsAPIRouter defines the required methods for binding the api requests to a responses for the VersionsAPI
// The VersionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VersionsAPIServicer to perform the required actions, then write the service results to the http response.
type VersionsAPIRouter interface { 
	GetPromptVersion(http.ResponseWriter, *http.Request)
	ListPromptVersions(http.ResponseWriter, *http.Request)
}


// APIKeysAPIServicer defines the api actions for the APIKeysAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type APIKeysAPIServicer interface { 
	DeleteApiKey(context.Context, string, string) (ImplResponse, error)
	GenerateApiKey(context.Context, string, ApiKeyInput) (ImplResponse, error)
	GetApiKey(context.Context, string, string) (ImplResponse, error)
	ListApiKeys(context.Context, string) (ImplResponse, error)
	UpdateApiKey(context.Context, string, string, ApiKeyInput) (ImplResponse, error)
}


// ApprovalsAPIServicer defines the api actions for the ApprovalsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ApprovalsAPIServicer interface { 
	AddApprovalToDraft(context.Context, string, string, map[string]interface{}) (ImplResponse, error)
	ListApprovalsOnDraft(context.Context, string, string) (ImplResponse, error)
	RemoveApprovalFromDraft(context.Context, string, string) (ImplResponse, error)
}


// CommentsAPIServicer defines the api actions for the CommentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CommentsAPIServicer interface { 
	AddCommentToDraft(context.Context, string, string, CommentInput) (ImplResponse, error)
	DeleteCommentFromDraft(context.Context, string, string, string) (ImplResponse, error)
	ListCommentsOnDraft(context.Context, string, string) (ImplResponse, error)
	UpdateCommentOnDraft(context.Context, string, string, string, CommentInput) (ImplResponse, error)
}


// DraftsAPIServicer defines the api actions for the DraftsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DraftsAPIServicer interface { 
	CreatePromptDraft(context.Context, string, PromptDraftInput) (ImplResponse, error)
	ListPromptDrafts(context.Context, string) (ImplResponse, error)
	MergeDraftIntoVersion(context.Context, string, string) (ImplResponse, error)
}


// HealthCheckAPIServicer defines the api actions for the HealthCheckAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HealthCheckAPIServicer interface { 
	HealthCheck(context.Context) (ImplResponse, error)
}


// OrganizationsAPIServicer defines the api actions for the OrganizationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OrganizationsAPIServicer interface { 
	CreateOrganization(context.Context, OrganizationInput) (ImplResponse, error)
	DeleteOrganization(context.Context, string) (ImplResponse, error)
	GetOrganization(context.Context, string) (ImplResponse, error)
	ListOrganizations(context.Context) (ImplResponse, error)
	UpdateOrganization(context.Context, string, OrganizationInput) (ImplResponse, error)
}


// ProjectsAPIServicer defines the api actions for the ProjectsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectsAPIServicer interface { 
	CreateProject(context.Context, ProjectInput) (ImplResponse, error)
	DeleteProject(context.Context, string) (ImplResponse, error)
	GetProject(context.Context, string) (ImplResponse, error)
	ListProjects(context.Context) (ImplResponse, error)
	UpdateProject(context.Context, string, ProjectInput) (ImplResponse, error)
}


// PromptsAPIServicer defines the api actions for the PromptsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PromptsAPIServicer interface { 
	CreatePrompt(context.Context, string, PromptInput) (ImplResponse, error)
	DeletePrompt(context.Context, string, string) (ImplResponse, error)
	GetPrompt(context.Context, string, string) (ImplResponse, error)
	ListPrompts(context.Context, string) (ImplResponse, error)
	UpdatePrompt(context.Context, string, string, PromptInput) (ImplResponse, error)
}


// TeamsAPIServicer defines the api actions for the TeamsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TeamsAPIServicer interface { 
	CreateTeam(context.Context, string, TeamInput) (ImplResponse, error)
	DeleteTeam(context.Context, string, string) (ImplResponse, error)
	GetTeam(context.Context, string, string) (ImplResponse, error)
	ListTeams(context.Context, string) (ImplResponse, error)
	UpdateTeam(context.Context, string, string, TeamInput) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	CreateUser(context.Context, UserInput) (ImplResponse, error)
	DeleteUser(context.Context, string) (ImplResponse, error)
	GetUser(context.Context, string) (ImplResponse, error)
	ListUsers(context.Context) (ImplResponse, error)
	UpdateUser(context.Context, string, UserInput) (ImplResponse, error)
}


// VersionsAPIServicer defines the api actions for the VersionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VersionsAPIServicer interface { 
	GetPromptVersion(context.Context, string, string) (ImplResponse, error)
	ListPromptVersions(context.Context, string) (ImplResponse, error)
}
