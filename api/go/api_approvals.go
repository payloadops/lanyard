// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ApprovalsAPIController binds http requests to an api service and writes the service results to the http response
type ApprovalsAPIController struct {
	service ApprovalsAPIServicer
	errorHandler ErrorHandler
}

// ApprovalsAPIOption for how the controller is set up.
type ApprovalsAPIOption func(*ApprovalsAPIController)

// WithApprovalsAPIErrorHandler inject ErrorHandler into controller
func WithApprovalsAPIErrorHandler(h ErrorHandler) ApprovalsAPIOption {
	return func(c *ApprovalsAPIController) {
		c.errorHandler = h
	}
}

// NewApprovalsAPIController creates a default api controller
func NewApprovalsAPIController(s ApprovalsAPIServicer, opts ...ApprovalsAPIOption) Router {
	controller := &ApprovalsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApprovalsAPIController
func (c *ApprovalsAPIController) Routes() Routes {
	return Routes{
		"AddApprovalToDraft": Route{
			strings.ToUpper("Post"),
			"/v1/prompts/{promptId}/drafts/{draftId}/approvals",
			c.AddApprovalToDraft,
		},
		"ListApprovalsOnDraft": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/drafts/{draftId}/approvals",
			c.ListApprovalsOnDraft,
		},
		"RemoveApprovalFromDraft": Route{
			strings.ToUpper("Delete"),
			"/v1/prompts/{promptId}/drafts/{draftId}/approvals",
			c.RemoveApprovalFromDraft,
		},
	}
}

// AddApprovalToDraft - Add an approval to a draft
func (c *ApprovalsAPIController) AddApprovalToDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AddApprovalToDraft(r.Context(), promptIdParam, draftIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListApprovalsOnDraft - List all approvals on a draft
func (c *ApprovalsAPIController) ListApprovalsOnDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	result, err := c.service.ListApprovalsOnDraft(r.Context(), promptIdParam, draftIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveApprovalFromDraft - Remove an approval from a draft
func (c *ApprovalsAPIController) RemoveApprovalFromDraft(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	draftIdParam := chi.URLParam(r, "draftId")
	if draftIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"draftId"}, nil)
		return
	}
	result, err := c.service.RemoveApprovalFromDraft(r.Context(), promptIdParam, draftIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
