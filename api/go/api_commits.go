// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Payload Ops API
 *
 * The Payload Ops API streamlines management of AI prompts, projects, organizations, teams, and users through conventional HTTP requests. This platform enables efficient automation and control of resources, providing robust tools for developers to manage settings, memberships, and activities seamlessly.
 *
 * API version: 1.0
 * Contact: info@payloadops.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// CommitsAPIController binds http requests to an api service and writes the service results to the http response
type CommitsAPIController struct {
	service CommitsAPIServicer
	errorHandler ErrorHandler
}

// CommitsAPIOption for how the controller is set up.
type CommitsAPIOption func(*CommitsAPIController)

// WithCommitsAPIErrorHandler inject ErrorHandler into controller
func WithCommitsAPIErrorHandler(h ErrorHandler) CommitsAPIOption {
	return func(c *CommitsAPIController) {
		c.errorHandler = h
	}
}

// NewCommitsAPIController creates a default api controller
func NewCommitsAPIController(s CommitsAPIServicer, opts ...CommitsAPIOption) Router {
	controller := &CommitsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommitsAPIController
func (c *CommitsAPIController) Routes() Routes {
	return Routes{
		"CreateBranchCommit": Route{
			strings.ToUpper("Post"),
			"/v1/prompts/{promptId}/branches/{branchId}/commits",
			c.CreateBranchCommit,
		},
		"GetBranchCommit": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/branches/{branchId}/commits/{commitId}",
			c.GetBranchCommit,
		},
		"ListBranchCommits": Route{
			strings.ToUpper("Get"),
			"/v1/prompts/{promptId}/branches/{branchId}/commits",
			c.ListBranchCommits,
		},
	}
}

// CreateBranchCommit - Create a new commit for a branch
func (c *CommitsAPIController) CreateBranchCommit(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchIdParam := chi.URLParam(r, "branchId")
	if branchIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"branchId"}, nil)
		return
	}
	commitInputParam := CommitInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commitInputParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommitInputRequired(commitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommitInputConstraints(commitInputParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateBranchCommit(r.Context(), promptIdParam, branchIdParam, commitInputParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBranchCommit - Retrieve a specific commit or the latest commit of a branch
func (c *CommitsAPIController) GetBranchCommit(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchIdParam := chi.URLParam(r, "branchId")
	if branchIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"branchId"}, nil)
		return
	}
	commitIdParam := chi.URLParam(r, "commitId")
	if commitIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commitId"}, nil)
		return
	}
	result, err := c.service.GetBranchCommit(r.Context(), promptIdParam, branchIdParam, commitIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBranchCommits - List all commits of a specific branch
func (c *CommitsAPIController) ListBranchCommits(w http.ResponseWriter, r *http.Request) {
	promptIdParam := chi.URLParam(r, "promptId")
	if promptIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"promptId"}, nil)
		return
	}
	branchIdParam := chi.URLParam(r, "branchId")
	if branchIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"branchId"}, nil)
		return
	}
	result, err := c.service.ListBranchCommits(r.Context(), promptIdParam, branchIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
