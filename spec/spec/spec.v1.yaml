openapi: 3.0.0
info:
  contact:
    email: info@payloadops.com
    name: Lanyard Ops Team
  description: "The Lanyard Ops API simplifies API key management for organizations by providing powerful tools to create, manage, and monitor API access securely. It allows teams to generate scoped API keys, configure rate limits, track usage, and integrate seamlessly with existing services."
  title: Lanyard Ops API
  version: "1.0"
servers:
- description: Production server (uses live data)
  url: https://api.payloadops.com/v1
- description: Sandbox server (uses test data)
  url: https://sandbox-api.payloadops.com/v1
security:
- ApiKeyAuth: []
- BearerAuth: []
paths:
  /health:
    get:
      description: |
        Confirms API operability by checking system metrics and infrastructure like database connections.
      operationId: healthCheck
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckSuccessResponse'
          description: "API is healthy and fully operational, with all necessary components\
            \ (like databases) connected and functioning."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/HealthCheckErrorResponse'
          description: "API is experiencing issues, indicating that one or more components\
            \ are not functioning correctly."
      summary: Health Check Endpoint
      tags:
      - Health Check
  /services:
    get:
      description: |
        Lists all services.
      operationId: listservices
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/Service'
                type: array
          description: "Successfully retrieved a list of all services, each represented\
            \ with basic details like service ID, name, and description."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the listing of services."
      security:
      - BearerAuth: []
      summary: List all services
      tags:
      - Services
    post:
      description: |
        Adds a new service to the system with given parameters.
      operationId: createService
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the necessary information for creating a new service,\
          \ such as the service name, description, and other relevant settings."
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "The service was created successfully, with details of the\
            \ new service provided in the response."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request due to invalid input, such as incomplete data\
            \ fields or improper values."
      security:
      - BearerAuth: []
      summary: Create a new service
      tags:
      - Services
  /services/{serviceId}:
    delete:
      description: |
        Removes a specified service and all associated data.
      operationId: deleteService
      parameters:
      - description: The unique identifier of the service to be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "service deleted successfully, with no remaining data stored."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to delete.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the service."
      security:
      - BearerAuth: []
      summary: Delete a service
      tags:
      - Services
    get:
      description: |
        Retrieves details for a specified service.
      operationId: getService
      parameters:
      - description: The unique identifier of the service to retrieve.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: Detailed information about the service retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the service."
      security:
      - BearerAuth: []
      summary: Retrieve a service by ID
      tags:
      - Services
    put:
      description: |
        Updates details for a specified service.
      operationId: updateService
      parameters:
      - description: The unique identifier of the service to be updated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ServiceInput'
        description: "Contains the new details for the service, which may include\
          \ the name, description, and other relevant settings."
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Service'
          description: "service updated successfully, reflecting new settings and\
            \ configurations."
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request due to invalid input or missing required fields.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No service found with the specified ID to update.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the service."
      security:
      - BearerAuth: []
      summary: Update a service
      tags:
      - Services
  /services/{serviceId}/keys:
    get:
      description: |
         Lists all API keys for a specified service.
      operationId: listApiKeys
      parameters:
      - description: The unique identifier of the service whose API keys are to be
          listed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
          description: Successfully retrieved a list of API keys for the service.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "The specified service was not found, indicating an invalid\
            \ service ID."
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of API keys."
      security:
      - BearerAuth: []
      summary: List all API keys for a service
      tags:
      - API Keys
    post:
      description: |
        Generates a new API key with given parameters.
      operationId: generateApiKey
      parameters:
      - description: The identifier of the service for which the API key is being
          generated.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: Contains the scope definitions for the new API key.
        required: true
      responses:
        "201":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: New API key generated successfully. The key details are included
            in the response.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid request, such as missing required fields or invalid\
            \ scope specifications."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the generation of the\
            \ API key."
      security:
      - BearerAuth: []
      summary: Generate a new API key with specific scopes for a service
      tags:
      - API Keys
  /services/{serviceId}/keys/{keyId}:
    delete:
      description: |
        Deletes the specified API key.
      operationId: deleteApiKey
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: "The API key was deleted successfully, no content returned."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the deletion of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Delete a specific API key
      tags:
      - API Keys
    get:
      description: |
        Retrieves the specified API key.
      operationId: getApiKey
      parameters:
      - description: The unique identifier of the service associated with the API
          key.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to retrieve.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: Detailed information about the API key retrieved successfully.
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the specified API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the retrieval of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Retrieve a specific API key
      tags:
      - API Keys
    put:
      description: |
        Updates the specified API key with the given parameters.
      operationId: updateApiKey
      parameters:
      - description: The unique identifier of the service for which the API key is
          managed.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be updated.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          service/json:
            schema:
              $ref: '#/components/schemas/ApiKeyInput'
        description: JSON payload containing the new scopes for the API key.
        required: true
      responses:
        "200":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: The API key's scopes were updated successfully.
        "400":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Invalid input, such as unspecified or unsupported scopes."
        "404":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Either the API key or the service was not found.
        "500":
          content:
            service/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "A server error occurred, preventing the update of the API\
            \ key."
      security:
      - BearerAuth: []
      summary: Update an API key's scopes
      tags:
      - API Keys
  
  /services/{serviceId}/actors:
    get:
      summary: Retrieve all actors associated with a service
      description: |
        Retrieves a list of all actors (users, applications, etc.) associated with a specific service.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
      responses:
        200:
          description: A list of actors associated with the service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actor'
        404:
          description: Service not found
      tags:
      - Actors

    post:
      summary: Add an actor to a service
      description: |
        Adds a new actor to the specified service. The actor can represent a user, application, or another entity that interacts with the API.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
      requestBody:
        description: Details of the actor to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
      responses:
        201:
          description: Actor successfully added to the service
        400:
          description: Invalid input
        404:
          description: Service not found
      tags:
      - Actors

  /services/{serviceId}/actors/{actorId}:
    get:
      tags:
        - Actors
      summary: Get the actor
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: actorId
          in: path
          required: true
          description: The unique ID of the pricing tier
          schema:
            type: string
      responses:
        200:
          description: Pricing tier successfully updated for the service
        404:
          description: Service or pricing tier not found
    put:
      tags:
        - Actors
      summary: Update an actor
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: actorId
          in: path
          required: true
          description: The unique ID of the pricing tier
          schema:
            type: string
      requestBody:
        description: Updated pricing tier details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
      responses:
        200:
          description: Pricing tier successfully updated for the service
        404:
          description: Service or pricing tier not found
    delete:
      summary: Remove an actor from a service
      description: |
        Removes an actor from the specified service.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: actorId
          in: path
          required: true
          description: The unique ID of the actor
          schema:
            type: string
      responses:
        204:
          description: Actor successfully removed
        404:
          description: Actor or service not found
      tags:
      - Actors

  /services/{serviceId}/pricing-tiers:
    get:
      tags:
        - Pricing Tier
      summary: Retrieve the pricing tier for a service
      description: |
        Returns the pricing tier associated with a specific service, including its limits, features, and pricing details.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
      responses:
        200:
          description: The pricing tier associated with the service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PricingTier'
        404:
          description: Service or pricing tier not found

    post:
      tags:
        - Pricing Tier
      summary: Assign a pricing tier to a service
      description: |
        Assigns a pricing tier to a service, setting the limits, features, and pricing that the service will follow. 
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
      requestBody:
        description: Pricing tier details to be assigned to the service
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
      responses:
        201:
          description: Pricing tier successfully assigned to the service
        400:
          description: Invalid input
        404:
          description: Service not found

  /services/{serviceId}/pricing-tiers/{tierId}:
    get:
      tags:
        - Pricing Tier
      summary: Get the pricing tier for a service
      description: |
        Get the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: tierId
          in: path
          required: true
          description: The unique ID of the pricing tier
          schema:
            type: string
      responses:
        200:
          description: Pricing tier successfully updated for the service
        404:
          description: Service or pricing tier not found
    put:
      tags:
        - Pricing Tier
      summary: Update the pricing tier for a service
      description: |
        Updates the pricing tier associated with a specific service, modifying the limits, features, or pricing.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: tierId
          in: path
          required: true
          description: The unique ID of the pricing tier
          schema:
            type: string
      requestBody:
        description: Updated pricing tier details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricingTierInput'
      responses:
        200:
          description: Pricing tier successfully updated for the service
        404:
          description: Service or pricing tier not found

    delete:
      tags:
        - Pricing Tier
      summary: Remove a pricing tier from a service
      description: |
        Removes the pricing tier from a service. After the removal, the service may default to a base or free tier, depending on the configuration.
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The unique ID of the service
          schema:
            type: string
        - name: tierId
          in: path
          required: true
          description: The unique ID of the pricing tier
          schema:
            type: string
      responses:
        204:
          description: Pricing tier successfully removed from the service
        404:
          description: Service or pricing tier not found
  /services/{serviceId}/key/{keyId}/auth:
    post:
      operationId: authApiKey
      summary: Auth a request per given API key
      description: |
        Authorizes an incoming API request by validating the provided API key.
      parameters:
      - description: The unique identifier of the service from which the API key will
          be deleted.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier of the API key to be deleted.
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        description: API key or token to be authorized
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  description: "The API key provided by the client"
                  type: string
                actorExternalId:
                  description: ""
                  type: string
                requiredRoles:
                  description: "The API key provided by the client"
                  type: array
                  items:
                    type: string
                requiredScopes:
                  description: "The API key provided by the client"
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: The request is authorized and scopes are returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorized:
                    type: boolean
                  message:
                    type: string
                  remaining:
                        type: integer 
                  rateLimit:
                    type: object
                    properties:
                      reset:
                        type: integer
                      limit:
                        type:
                          integer
                      remaining:
                        type: integer
        401:
          description: Unauthorized request
      tags:
      - API Keys



components:
  schemas:
    BillingInfo:
      description: "Billing information, including pricing tier and trial expiration date"
      type: object
      properties:
        tier:
          type: string
          description: "Pricing tier of the API key"
        tierId:
          type: string
          description: "ID of pricing tier"
        trialExpiry:
          description: "The date when the trial period ends"
          type: string
          format: date-time
        isTrialActive:
          description: "Indicates whether the trial period is currently active for this actor"
          type: boolean
        isTrialElgible:
          description: "Indicates whether the actor is eligble for a trial period"
          type: boolean
    PricingTier:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      properties:
        id:
          description: "Unique identifier for the pricing tier"
          type: string
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: "The maximum number of API requests allowed per month"
          type: integer
        defaultRateLimit:
          description: "Rate limit configuration for the tier (requests per second or minute)"
          allOf:
            - $ref: '#/components/schemas/RateLimit'
        overagePrice:
          description: "The price per extra request beyond the monthly limit"
          type: number
          format: float
    PricingTierInput:
      description: |
        Represents a pricing tier for API usage, defining limits and features associated with the service.
      properties:
        name:
          description: "The name of the pricing tier (e.g., Free, Pro, Enterprise)"
          type: string
        defaultMonthlyRequestLimit:
          description: "The maximum number of API requests allowed per month"
          type: integer
        defaultRateLimit:
          description: "Rate limit configuration for the tier (requests per second or minute)"
          allOf:
            - $ref: '#/components/schemas/RateLimit'
        overagePrice:
          description: "The price per extra request beyond the monthly limit"
          type: number
          format: float
    RateLimit:
      description: "Rate limit configuration for this API key"
      type: object
      properties:
        name:
          description: "The name of the rate limit"
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: "The number of allowed requests in the defined time window"
          type: integer
        duration:
          description: "Time window for the rate limit, specified in ISO duration format (e.g., '1h', '30m')"
          type: string
    RateLimitInput:
      description: "Rate limit configuration for this API key"
      type: object
      properties:
        name:
          description: "The name of the rate limit"
          maxLength: 16
          minLength: 1
          type: string
        limit:
          description: "The number of allowed requests in the defined time window"
          type: integer
        window:
          description: "Time window for the rate limit, specified in ISO duration format (e.g., '1h', '30m')"
          type: string
    KSUID:
      description: A K-sortable unique identifier (KSUID)
      maxLength: 27
      minLength: 27
      pattern: "^[A-Za-z0-9]{27}$"
      type: string
    HealthCheckSuccessResponse:
      example:
        status: healthy
      properties:
        status:
          example: healthy
          type: string
      type: object
    HealthCheckErrorResponse:
      example:
        status: unhealthy
      properties:
        status:
          example: unhealthy
          type: string
      type: object
    Service:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: ""
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the service
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        blockedIpAddresses:
          description: List of blocked ip addresses
          type: array
          items:
            type: string
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
        createdAt:
          description: Timestamp when the service was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the service was last updated
          format: date-time
          type: string
      type: object
    ServiceInput:
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the service
          maxLength: 30
          minLength: 1
          type: string
        description:
          description: A brief description of the service
          maxLength: 180
          minLength: 1
          type: string
        blockedIpAddresses:
          description: List of blocked ip addresses
          type: array
          items:
            type: string
      required:
      - name
      type: object
    Actor:
      example:
        id: ""
        externalId: ""
        rateLimit: ""
      properties:
        id:
            allOf:
            - $ref: '#/components/schemas/KSUID'
            description: Unique identifier for the API key
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        billingInfo: 
          allOf:
             - $ref: '#/components/schemas/BillingInfo'
          description: "Billing info for actor"
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
      type: object
    ActorInput:
      example:
        externalId: ""
        rateLimit: ""
      properties:
        externalId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        billingInfo: 
          allOf:
             - $ref: '#/components/schemas/BillingInfo'
          description: "Billing info for actor"
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
      type: object
    ApiKey:
      example:
        createdAt: 2023-09-14T12:00:00.000Z
        id: "ksu1example"
        secret: "newSecretKey123"
        scopes:
          - read
          - write
        serviceId: "serviceId123"
        actorId: "actorId456"
        updatedAt: 2023-09-14T12:00:00.000Z
        name: "Example API Key"
        rateLimit: 
          type: "basic"
          maxRequestsPerHour: 1000
        billingInfo:
          tier: "pro"
          trialExpiry: 2023-10-14T12:00:00.000Z
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: Unique identifier for the API key
        secret:
          description: The API key token
          maxLength: 180
          minLength: 1
          type: string
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
        rateLimit:
          allOf:
            - $ref: '#/components/schemas/RateLimit'
          description: "Rate limit configuration for this API key"
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        createdAt:
          description: Timestamp when the API key was created
          format: date-time
          type: string
        updatedAt:
          description: Timestamp when the API key was last updated
          format: date-time
          type: string
        name:
          description: "Name of the API key"
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration date"
        expiry:
          description: "Optional expiration date for the API key"
          format: date-time
          type: string
      type: object
    ApiKeyInput:
      properties:
        roles:
          description: List of roles granted by this API key
          items:
            type: string
          type: array
        scopes:
          description: List of scopes or permissions granted by this API key
          items:
            type: string
          type: array
        monthlyRequestLimit:
          description: Number of monthly requests
          type: integer
        rateLimit:
          allOf:
            - $ref: '#/components/schemas/RateLimit'
          description: "Rate limit configuration for this API key"
        actorId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The actor ID this API key is associated with
        serviceId:
          allOf:
          - $ref: '#/components/schemas/KSUID'
          description: The service ID this API key belongs to
        name:
          description: "Name of the API key"
          maxLength: 16
          minLength: 1
          type: string
        billingInfo:
          allOf:
          - $ref: '#/components/schemas/BillingInfo'
          description: "Billing information, including pricing tier and trial expiration date"
        expiry:
          description: "Optional expiration date for the API key"
          format: date-time
          type: string
      required:
      - name
      - actorId
      - serviceId
      type: object
    Error:
      example:
        error: error
      properties:
        error:
          description: Message describing the error that occurred
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      description: |
        API Key authentication provides a straightforward method for clients to authenticate requests. This scheme expects an API key to be supplied in the headers of each request. Clients must include the API key in the 'X-API-KEY' header field.

        **How to use**:
        - Obtain an API key from the API provider.
        - Include the API key in the header of each request to the API as follows:
          ```
          X-API-KEY: {api_key}
          ```
        - The API validates the key against its database, and if the key is valid, allows access to the requested resources.
      in: header
      name: X-API-KEY
      type: apiKey
    BearerAuth:
      bearerFormat: JWT
      description: |
        Bearer Token authentication uses JSON Web Tokens (JWT) to verify the identity of the requester. This scheme is included in the Authorization header of each HTTP request using the Bearer format.

        **How to use**:
        - Obtain a JWT from the authentication server. Typically, this involves an initial request with credentials (username/password) to receive the token.
        - Include the token in the Authorization header of your HTTP requests as follows:
          ```
          Authorization: Bearer {token}
          ```
        - The server decodes the JWT to verify its validity and authorizes the request based on the token's payload and signature.

        **Example**:
        To access protected routes or resources, the client must authenticate by providing the JWT in the authorization header:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiw
      scheme: bearer
      type: http
